# Declare the scene
Scene e0001.

# Declare asset paths
BackgroundAsset e0001: |./scene_name_background.png|.

# Scene specific predicates, fluents, and tasks
fluent BradAdmittedStudy ?scene.
fluent PleasantriesOver ?scene.
[function]
fluent Check ?thread ?frag.

# Define the initial state as required by StoryAssembler
InitialSceneState e0001: 
    [Not [PleasantriesOver e0001]]
    [set BradInsecurityToNed = 0]
    [set Thread = none]
    [set Learnings = empty]
    [set ClosedThreads = empty]
    [now [Not [BradAdmittedStudy e0001]]]
[end]

# Scene specific tasks
[predicate]
BradLearned: [Member justice Learnings] [Member beneficence Learnings] [Member vulnerable Learnings]
# TODO vulnerable should be switched to [Member respect Learnings] when its done

OpenThreads:
    [UnlockPrinciples]
    [UnlockExtra]
[end]

UnlockPrinciples:
    [OpenCheckpoint beneficence beneficence_intro]
    [OpenCheckpoint respect respect_intro]
    [OpenCheckpoint justice justice_intro]
[end]

UnlockExtra:
    [OpenCheckpoint vulnerable vulnerable_intro]
    [OpenCheckpoint stanford stanford_intro]
    [OpenCheckpoint milgram you_remember]
[end]

MentionAllExtra:
    [add milgram_mentioned Learnings]
    [add vulnerable_mentioned Learnings]
    [add stanford_mentioned Learnings]
[end]


DoMentionOfExtraThread: "For instance, we could talk about [MentionUnmentioned]. "
DoMentionOfExtraThread.

[predicate]
MentionUnmentioned: [MentionMilgram]
MentionUnmentioned: [MentionStanford]
MentionUnmentioned: [MentionVulnerable]
MentionUnmentioned: [MentionJustice]
MentionUnmentioned: [MentionBeneficence]

[predicate]
MentionMilgram:
    [Not [Member milgram ClosedThreads]]
    [add milgram_mentioned Learnings]
    the Milgram syphilis study
[end]

[predicate]
MentionStanford:
    [Not [Member stanford ClosedThreads]]
    [add stanford_mentioned Learnings]
    the Stanford prison experiment
[end]

[predicate]
MentionVulnerable:
    [Not [Member vulnerable ClosedThreads]]
    [add vulnerable_mentioned Learnings]
    the concept of vulnerable populations
[end]

[predicate]
MentionJustice:
    [Not [Member justice ClosedThreads]]
    [add justice_mentioned Learnings]
    what the IRB calls Justice
[end]

[predicate]
MentionBeneficence:
    [Not [Member beneficence ClosedThreads]]
    [add beneficence_mentioned Learnings]
    beneficence
[end]

# Open the final thread
# gets called at the end of each Extra Thread (so you have to visit at least one)
OpenResolution: 
    [OpenCheckpoint resolution resolution_intro]
    [DoMentionOfExtraThread] # Open another unopened thread if there is one
[end]

# Declare the characters and locations
Character brad e0001 |Brad|.
CharacterAsset brad e0001 |./brad.png|.
CharacterLocation brad e0001 [c0, 0].

Character ned e0001 |Ned|.
CharacterAsset ned e0001 |./ned.png|.
CharacterLocation ned e0001 [0, 0].

# Declare all fragments
[randomly]
Fragment entry e0001.
Fragment outside e0001.
Fragment sneaky e0001.
Fragment grill e0001.
Fragment play_off e0001.
Fragment enter e0001.
Fragment youre_late e0001.
Fragment no_worries e0001.
Fragment doubt e0001.
Fragment relief e0001.
Fragment remind e0001.
Fragment agenda_start e0001.
Fragment slides e0001.
Fragment phd e0001.
Fragment phd_r e0001.
Fragment classes e0001.
Fragment classes_r e0001.
Fragment department e0001.
Fragment department_r e0001.
Fragment admin e0001.
Fragment admin_r e0001.
Fragment what_else e0001.
Fragment what_else_top_level e0001.
Fragment what_else_transition e0001.
Fragment stress e0001.
Fragment need_success e0001.
Fragment project_status e0001.
Fragment project e0001.
Fragment insecurity_start e0001.
Fragment insecurity_doubt e0001.
Fragment stressed e0001.
Fragment different_today e0001.
Fragment say_something e0001.
Fragment exit_bad e0001.
Fragment grants_funding e0001.
Fragment dissapointed_feeling e0001.
Fragment frazzled e0001.
Fragment really_hard e0001.
Fragment apologizes e0001.
Fragment accept_apology e0001.
Fragment doubt_apology e0001.
Fragment thanks e0001.
Fragment end_insecurity e0001.
Fragment irb_intro e0001.
Fragment proud_of_me e0001.
Fragment survey_was_fun e0001.
Fragment get_ahead e0001.
Fragment sounds_great e0001.
Fragment sounds_great_2 e0001.
Fragment confession_1 e0001.
Fragment ned_shocked e0001.
Fragment brad_panicking e0001.
Fragment confession_2 e0001.
Fragment with_concern e0001.
Fragment talked_to_parents e0001.
Fragment when_approval e0001.
Fragment herb e0001.
Fragment oregano e0001.
Fragment irb e0001.
Fragment confession_3 e0001.
Fragment ned_dont_press e0001.
Fragment bad_feeling e0001.
Fragment brad_goes_along e0001.
Fragment principles_intro e0001.
Fragment yes_info e0001.
Fragment no_info e0001.
Fragment tenants e0001.
Fragment beneficence_intro e0001.
Fragment beneficence_define e0001.
Fragment research_good_thing e0001.
Fragment not_enough e0001.
Fragment research_is_beneficial e0001.
Fragment everyone_thinks_research_good e0001.
Fragment brad_confused e0001.
Fragment medical_trials e0001.
Fragment brad_unsure e0001.
Fragment brad_cocky e0001.
Fragment brad_curious e0001.
Fragment do_u_get_it e0001.
Fragment brad_silent e0001.
Fragment brad_notices e0001.
Fragment u_dont_understand e0001.
Fragment side_effects e0001.
Fragment side_effects_transition e0001.
Fragment avoid_harm e0001.
Fragment apply_principle e0001.
Fragment figuring_out e0001.
Fragment resolution_intro e0001.
Fragment what_is_plan e0001.
Fragment brad_thinks_ready e0001.
Fragment brad_not_ready e0001.
Fragment try_again e0001.
Fragment resolution_complete e0001.
Fragment end e0001.
Fragment bus e0001.
Fragment lament e0001.
Fragment overworked e0001.
Fragment subjects e0001.
Fragment silence e0001.
Fragment reflect e0001.
Fragment justice_intro e0001.
Fragment brad_jokes e0001.
Fragment why_board e0001.
Fragment ned_corrects e0001.
Fragment principles_important e0001.
Fragment just_making_a_joke e0001.
Fragment brad_apologizes e0001.
Fragment dont_take_lightly e0001.
Fragment wym e0001.
Fragment syphilis e0001.
Fragment violation_of_ben e0001.
Fragment yes_beneficence e0001.
Fragment violation_of_something e0001.
Fragment violation_of_justice e0001.
Fragment you_remember e0001.
Fragment milgram_confusion e0001.
Fragment milgram_blank_stare e0001.
Fragment omg_yes e0001.
Fragment describe_milgram_1 e0001.
Fragment describe_milgram_2 e0001.
Fragment milgram_cringe e0001.
Fragment brad_why e0001.
Fragment milgram_explain e0001.
Fragment vulnerable_intro e0001.
Fragment ned_vulnerable_intro e0001.
Fragment vulnerable_specific e0001.
Fragment full_consent e0001.
Fragment what_is_consent e0001.
Fragment consent_definition e0001.
Fragment end_vulnerable_bad e0001.
Fragment end_vulnerable_good e0001.
Fragment stanford_intro e0001.
Fragment stanford_misleading e0001.
Fragment stanford_really e0001.
Fragment informed_uninformed e0001.
Fragment uninformed_1 e0001.
Fragment uninformed_2 e0001.
Fragment was_informed e0001.
Fragment what_was_wrong e0001.
Fragment expectations e0001.
Fragment researchers_involved e0001.
Fragment spiral e0001.
Fragment advertisement e0001.
Fragment how_bias_tho e0001.
Fragment stanford_end e0001.


# Fragments
Content entry: Welcome to Academical!
Conditions  entry.
Effects     entry.
GoToChoice  entry outside.

Content outside: |Brad reaches the door of his advisor's office and pauses. He wipes the sweat from underneath his glasses and takes a deep breath, trying to calm his racing heart. Could he even come clean? |
Speaker outside brad.
ChoiceLabel outside: |Stand outside of Ned's office |
GoToChoice outside grill.
GoToChoice outside play_off.
Effects outside: 
	[set Thread = entry]
	[UnlockExtra] # Unlock additional content threads (they will still be gated)
[end]
Conditions outside: [Not [Member entry ClosedThreads]]
CharacterTag outside ned expression neutral.
CharacterTag outside brad expression neutral.

Content sneaky: |extra threads unlocked |
Speaker sneaky ned.
ChoiceLabel sneaky: |Cheat (dev shortcut) |
GoToChoice sneaky enter.
GoToChoice sneaky irb_intro.
ChoiceCondition sneaky sneaky_c: [AvailableCheckpoint entry]
ChoiceCondition sneaky sneaky_cc: [AvailableCheckpoint entry]
ChoiceCondition sneaky sneaky_ccc: [AvailableCheckpoint entry]
Effects sneaky: [set Thread = entry]
Conditions sneaky.
CharacterTag sneaky ned expression neutral.
CharacterTag sneaky brad expression neutral.

Content grill: 
	|Ned had a reputation for being passionate, but not unfair. He'd always been a bit tough on Brad. He was sharp and wil find out eventually. |<br><br>
	|But… maybe he doesn’t need to come clean. It's Ned's fault that the approval took so long to submit, and Brad is running out of time. |
[end]
Speaker grill brad.
ChoiceLabel grill: |Think about the meeting with Ned |
GoToChoice grill enter.
Effects grill: [set Thread = entry]
Conditions grill: [= Thread entry][Not [Member entry ClosedThreads]]
CharacterTag grill ned expression neutral.
CharacterTag grill brad expression nervous.

Content play_off: |Brad knows it’s better to come clean about his mistake, but the delay had jeopardized his progress. He could lay this down carefully to Ned, and tell him that he was on track, without elaborating on what that meant. Brad grips the doorknob a little tighter and makes a decision: he’ll tell the truth, just not the whole truth. |
Speaker play_off brad.
ChoiceLabel play_off: |Think about coming clean |
GoToChoice play_off enter.
Effects play_off: [set Thread = entry]
Conditions play_off: [= Thread entry][Not [Member entry ClosedThreads]]
CharacterTag play_off ned expression neutral.
CharacterTag play_off brad expression nervous.

Content enter: |Ned clearly hadn’t missed Brad’s late arrival. No more stalling. Brad squares his shoulders and shuts the door behind himself. |
Speaker enter ned.
ChoiceLabel enter: |Enter the office |
GoToChoice enter youre_late.
Effects enter: [set Thread = entry]
Conditions enter: [= Thread entry][Not [Member entry ClosedThreads]]
CharacterTag enter ned expression neutral.
CharacterTag enter brad expression neutral.

Content youre_late: |"Ah, there you are!" Ned says cheerfully. "I was beginning to wonder if we'd canceled this week." |
Speaker youre_late ned.
ChoiceLabel youre_late: |Greet Ned |
GoToChoice youre_late no_worries.
Effects youre_late: [set Thread = entry]
Conditions youre_late: [= Thread entry][Not [Member entry ClosedThreads]]
CharacterTag youre_late ned expression happy.
CharacterTag youre_late brad expression neutral.

Content no_worries: |"It's just us today," Ned smiles, "But I do have a time limit. I have a lecture right after this, so we’ll have to make this quick." |
Speaker no_worries ned.
ChoiceLabel no_worries: |Continue |
GoToChoice no_worries doubt.
GoToChoice no_worries relief.
Effects no_worries: [set Thread = entry]
Conditions no_worries: [= Thread entry][Not [Member entry ClosedThreads]]
CharacterTag no_worries ned expression happy.
CharacterTag no_worries brad expression neutral.

Content doubt: 
	|Brad can't tell if Ned doesn’t care or is just trying to relieve the tension. |<br><br>
	|"There was a problem with the buses..." Brad starts lamely, but then cuts himself off. |
[end]
Speaker doubt brad.
ChoiceLabel doubt: |Blame the buses |
GoToChoice doubt remind.
Effects doubt: [set Thread = entry][set BradInsecurityToNed = BradInsecurityToNed + 1]
Conditions doubt: [= Thread entry][Not [Member entry ClosedThreads]]
CharacterTag doubt ned expression neutral.
CharacterTag doubt brad expression nervous.

Content relief: 
	|Ned seems like he's in a good mood. Maybe this will be easier than expected.|<br><br>
	|Brad smiles and says, "Sorry for being late, Ned, you know those buses never run on time."|<br><br>
	|Ned nods understandingly.|<br><br>
	|"You're right, they run on wheels," Ned answers with a grin. The tension in the room eases, and Brad feels relieved. |
[end]
Speaker relief brad.
ChoiceLabel relief: |Comment on the buses |
GoToChoice relief remind.
Effects relief: [set Thread = entry]
Conditions relief: [= Thread entry][Not [Member entry ClosedThreads]]
CharacterTag relief ned expression happy.
CharacterTag relief brad expression sad.

Content remind: |Ned interrupts Brad's train of thought. "Remind me where you're at again? Were you able to start on those surveys yet?" He pauses, and with some emphasis adds "Or are we still sitting on them?" He glances at his stack of notes, possibly annoyed. "I think we had decided we wanted to interview the children as well as their parents, is that right?" |
Speaker remind ned.
ChoiceLabel remind: |Continue |
ChoiceCondition remind remind_c: [AvailableCheckpoint entry]
ChoiceCondition remind remind_cc: [AvailableCheckpoint entry]
ChoiceCondition remind remind_ccc: [AvailableCheckpoint entry]
Effects remind: 
	[set Thread = entry]
	[OpenCheckpoint agenda agenda_start]
	[CloseAllCheckpoints entry]
[end]
Conditions remind: [= Thread entry][Not [Member entry ClosedThreads]]
CharacterTag remind ned expression sad.
CharacterTag remind brad expression nervous.

Content agenda_start: |Brad meets with Ned weekly. They use a shared document to track- Oh shoot, he forgot to update the document yesterday. |
Speaker agenda_start brad.
ChoiceLabel agenda_start: |Move on to the agenda |
GoToChoice agenda_start slides.
Effects agenda_start: 
	[set BradInsecurityToNed = BradInsecurityToNed + 1]
	[set Thread = agenda] 
	# [OpenCheckpoint agenda slides]
[end]
Conditions agenda_start: [Not [Member agenda ClosedThreads]]
Reusable agenda_start e0001.
CharacterTag agenda_start ned expression neutral.
CharacterTag agenda_start brad expression neutral.

Content slides: |He hadn't prepared, but he could wing it. These meetings always followed the same format... they’d check in on his classes, on graduation, and talk about new happenings in the field. |
Speaker slides brad.
ChoiceLabel slides: |Consider improvising |
GoToChoice slides phd.
GoToChoice slides classes.
GoToChoice slides department.
GoToChoice slides admin.
Effects slides: [set Thread = agenda]
Conditions slides: [Not [Member agenda ClosedThreads]]
Reusable slides e0001.
CharacterTag slides ned expression neutral.
CharacterTag slides brad expression nervous.

Content phd: |"I feel like I've made good progress on my degree - I can see the finish line! What should focus on next?" Brad asks, feigning confidence. |
Speaker phd brad.
ChoiceLabel phd: |Bring up PhD Progress |
GoToChoice phd phd_r.
Effects phd: [set Thread = agenda]
Conditions phd: [Not [Member agenda ClosedThreads]]
Reusable phd e0001.
CharacterTag phd ned expression neutral.
CharacterTag phd brad expression happy.

Content phd_r: 
	|"Yeah, you're doing a great job! However, in order to secure funding, you should also work on publishing some quality research within the next year."|<br><br>
	|Of course! Publishing was the key to career success. Brad wanted immediate funding too. But there wasn't an easy answer they could put down in a meeting. |
[end]
Speaker phd_r ned.
ChoiceLabel phd_r: |Listen to Ned's recommendation |
GoToChoice phd_r what_else.
Effects phd_r: [set Thread = agenda]
Conditions phd_r: [Not [Member agenda ClosedThreads]]
Reusable phd_r e0001.
CharacterTag phd_r ned expression confident.
CharacterTag phd_r brad expression happy.

Content classes: 
	|"What about auditing a class? It would maybe help me expand my network and develop a diverse skillset."|<br><br>
	|Brad’s friend in the stats department was teaching a class that would be an obvious pick. |
[end]
Speaker classes brad.
ChoiceLabel classes: |Ask about auditing classes |
GoToChoice classes classes_r.
Effects classes: [set Thread = agenda]
Conditions classes: [Not [Member agenda ClosedThreads]]
Reusable classes e0001.
CharacterTag classes ned expression neutral.
CharacterTag classes brad expression confused.

Content classes_r: 
	|"Although auditing is a great thing to do, I don’t think it should be your priority right now. Right now, you'll benefit more from diving deeper into your current projects."|<br><br>
	|Ned is right - Brad already feels overworked and overwhelmed. A new project isn’t going to help. Time to think of something else. |
[end]
Speaker classes_r ned.
ChoiceLabel classes_r: |Listen to Ned’s opinion |
GoToChoice classes_r what_else.
Effects classes_r: [set Thread = agenda]
Conditions classes_r: [Not [Member agenda ClosedThreads]]
Reusable classes_r e0001.
CharacterTag classes_r ned expression confident.
CharacterTag classes_r brad expression neutral.

Content department: 
	|"So, the whole department is talking about Katherine and company. Do you know what’s going on?"|<br><br>
	|These meetings usually included gossip at some point, anyway. It couldn't hurt to broach it early. |
[end]
Speaker department brad.
ChoiceLabel department: |Bring up department drama |
GoToChoice department department_r.
ChoiceCondition department department_c: [AvailableCheckpoint agenda]
ChoiceCondition department department_cc: [AvailableCheckpoint agenda]
ChoiceCondition department department_ccc: [AvailableCheckpoint agenda]
Effects department: [set Thread = agenda]
Conditions department: [Not [Member agenda ClosedThreads]]
Reusable department e0001.
CharacterTag department ned expression neutral.
CharacterTag department brad expression angry.

Content department_r: 
	|"That’s not important -- department politics aren’t a place you want to spend too much time as a student."|<br><br>
	|Despite the surprise of his sudden shutdown, Ned is right. Was that somewhat of a slight? |
[end]
Speaker department_r ned.
ChoiceLabel department_r: |Listen to Ned's response |
GoToChoice department_r what_else.
ChoiceCondition department_r department_r_c: [AvailableCheckpoint agenda]
ChoiceCondition department_r department_r_cc: [AvailableCheckpoint agenda]
ChoiceCondition department_r department_r_ccc: [AvailableCheckpoint agenda]
Effects department_r: 
	[set BradInsecurityToNed = BradInsecurityToNed + 1]
	[set Thread = agenda]
[end]
Conditions department_r: [Not [Member agenda ClosedThreads]]
Reusable department_r e0001.
CharacterTag department_r ned expression neutral.
CharacterTag department_r brad expression nervous.

Content admin: 
	|"Well, are there any key deadlines or forms I've got to hop on?"|<br><br>
	|Brad could always count on some administrative business to be brought up during these check-ins. |
[end]
Speaker admin brad.
ChoiceLabel admin: |Ask about admin work |
GoToChoice admin admin_r.
ChoiceCondition admin admin_c: [AvailableCheckpoint agenda]
ChoiceCondition admin admin_cc: [AvailableCheckpoint agenda]
ChoiceCondition admin admin_ccc: [AvailableCheckpoint agenda]
Effects admin: [set Thread = agenda]
Conditions admin: [Not [Member agenda ClosedThreads]]
Reusable admin e0001.
CharacterTag admin ned expression neutral.
CharacterTag admin brad expression neutral.

Content admin_r: 
	|"At this point, the deadlines depend on what you want to publish and where. We've got a lot of momentum on our Child Moral Development project; perhaps that's a good place for us to focus this meeting? We have some important admin work to do with the IRB."|<br><br>
	|Brad is so excited about the project. So excited, in fact, that he had already started to interview parents with the survey he’d developed.|<br><br>
	|"How do you feel about it? What do we need to do next?" |
[end]
Speaker admin_r ned.
ChoiceLabel admin_r: |Listen to Ned's response |
GoToChoice admin_r stress.
GoToChoice admin_r project.
ChoiceCondition admin_r admin_r_c: [AvailableCheckpoint agenda]
ChoiceCondition admin_r admin_r_cc: [AvailableCheckpoint agenda]
ChoiceCondition admin_r admin_r_ccc: [AvailableCheckpoint agenda]
Effects admin_r: 
	[set Thread = agenda]
	[OpenCheckpoint agenda what_else_transition]
[end]
Conditions admin_r: [Not [Member agenda ClosedThreads]]
Reusable admin_r e0001.
CharacterTag admin_r ned expression neutral.
CharacterTag admin_r brad expression netural.

Content what_else: |"What else is on the agenda for today?" |
Speaker what_else ned.
ChoiceLabel what_else: |Continue |
GoToChoice what_else stress.
GoToChoice what_else project.
ChoiceCondition what_else what_else_c: [AvailableCheckpoint agenda]
ChoiceCondition what_else what_else_cc: [AvailableCheckpoint agenda]
ChoiceCondition what_else what_else_ccc: [AvailableCheckpoint agenda]
Effects what_else: 
	[set Thread = agenda]
	[OpenCheckpoint agenda what_else_transition]
[end]
Conditions what_else: [Not [Member agenda ClosedThreads]]
Reusable what_else e0001.
CharacterTag what_else ned expression neutral.
CharacterTag what_else brad expression neutral.

Content what_else_top_level: |"What else should we talk about?" asks Ned. |
Speaker what_else_top_level ned.
ChoiceLabel what_else_top_level: |Continue |
GoToChoice what_else_top_level stress.
GoToChoice what_else_top_level project.
ChoiceCondition what_else_top_level what_else_top_level_c: [AvailableCheckpoint agenda]
ChoiceCondition what_else_top_level what_else_top_level_cc: [AvailableCheckpoint agenda]
ChoiceCondition what_else_top_level what_else_top_level_ccc: [AvailableCheckpoint agenda]
Effects what_else_top_level: 
	[set Thread = agenda]
	[OpenCheckpoint agenda what_else_transition]
[end]
Conditions what_else_top_level: [Not [Member agenda ClosedThreads]]
Reusable what_else_top_level e0001.
CharacterTag what_else_top_level ned expression neutral.
CharacterTag what_else_top_level brad expression neutral.

Content what_else_transition: |"We're a bit limited on time for today - let's stay on track." |
Speaker what_else_transition ned.
ChoiceLabel what_else_transition: |Await Ned's response |
GoToChoice what_else_transition stress.
GoToChoice what_else_transition project.
ChoiceCondition what_else_transition what_else_transition_c: [AvailableCheckpoint agenda]
ChoiceCondition what_else_transition what_else_transition_cc: [AvailableCheckpoint agenda]
ChoiceCondition what_else_transition what_else_transition_ccc: [AvailableCheckpoint agenda]
Effects what_else_transition: [set Thread = agenda]
Conditions what_else_transition: [Not [Member agenda ClosedThreads]]
Reusable what_else_transition e0001.
CharacterTag what_else_transition ned expression nervous.
CharacterTag what_else_transition brad expression nervous.

Content stress: |"The project is great but the pressure is honestly a little high. It can be hard to cope." |
Speaker stress brad.
ChoiceLabel stress: |Mention project stress |
GoToChoice stress need_success.
ChoiceCondition stress stress_c: [AvailableCheckpoint agenda]
ChoiceCondition stress stress_cc: [AvailableCheckpoint agenda]
ChoiceCondition stress stress_ccc: [AvailableCheckpoint agenda]
Effects stress: [set Thread = agenda]
Conditions stress: [Not [Member agenda ClosedThreads]]
Reusable stress e0001.
CharacterTag stress ned expression neutral.
CharacterTag stress brad expression happy.

Content need_success: |"I get it. It's easy to get overwhelmed, but try to take it one step at a time. For example, we can take one large task and break it down into many smaller tasks.That’ll make things easier! Let's try it. What are you working on right now?" |
Speaker need_success ned.
ChoiceLabel need_success: |Wait for advice |
GoToChoice need_success project_status.
ChoiceCondition need_success need_success_c: [AvailableCheckpoint agenda]
ChoiceCondition need_success need_success_cc: [AvailableCheckpoint agenda]
ChoiceCondition need_success need_success_ccc: [AvailableCheckpoint agenda]
Effects need_success: 
	[set Thread = agenda]
	[set BradInsecurityToNed = BradInsecurityToNed + 1]
[end]
Conditions need_success: [Not [Member agenda ClosedThreads]]
Reusable need_success e0001.
CharacterTag need_success ned expression happy.
CharacterTag need_success brad expression happy.

Content project_status: |"One of the things I'm working on is the paperwork I need to do for the surveys." |
Speaker project_status brad.
ChoiceLabel project_status: |Bring up paperwork |
ChoiceCondition project_status project_status_c: [AvailableCheckpoint agenda]
ChoiceCondition project_status project_status_cc: [AvailableCheckpoint agenda]
ChoiceCondition project_status project_status_ccc: [AvailableCheckpoint agenda]
Effects project_status: 
	[set Thread = agenda]
	[OpenCheckpoint irb irb_intro]
	[CloseAllCheckpoints agenda]
[end]
Conditions project_status: [Not [Member agenda ClosedThreads]]
Reusable project_status e0001.
CharacterTag project_status ned expression neutral.
CharacterTag project_status brad expression nervous.

Content project: 
	|Brad had been recruiting participants for the study and had even got a wave of early responses from parents. This was a perfect example to prove how smoothly things were going.|<br><br>
	|That being said, the research cycle was still a bit fuzzy. Brad was vaguely aware of some forms and deadlines coming up soon. There was also some committee he was supposed to talk to (what did Ned call it - "HERB"??). |
[end]
Speaker project brad.
ChoiceLabel project: |Consider project status |
ChoiceCondition project project_c: [AvailableCheckpoint agenda]
ChoiceCondition project project_cc: [AvailableCheckpoint agenda]
ChoiceCondition project project_ccc: [AvailableCheckpoint agenda]
Effects project: 
	[set Thread = agenda]
	[OpenCheckpoint irb irb_intro]
	[CloseAllCheckpoints agenda]
[end]
Conditions project: [Not [Member agenda ClosedThreads]]
Reusable project e0001.
CharacterTag project ned expression nervous.
CharacterTag project brad expression nervous.

Content insecurity_start: |Brad wonders how he could have possibly been this far behind. Could it be his tendency to procrastinate? Or was it that he simply wasn't cut out to be a PhD candidate? |
Speaker insecurity_start brad.
ChoiceLabel insecurity_start: |Think about his disorganization |
GoToChoice insecurity_start insecurity_doubt.
ChoiceCondition insecurity_start insecurity_start_c: [AvailableCheckpoint insecurity]
ChoiceCondition insecurity_start insecurity_start_cc: [AvailableCheckpoint insecurity]
ChoiceCondition insecurity_start insecurity_start_ccc: [AvailableCheckpoint insecurity]
Effects insecurity_start: 
	[set Thread = insecurity]
	[add brad_insecure Learnings]
[end]
Conditions insecurity_start: [>= BradInsecurityToNed 0]
Reusable insecurity_start e0001.
CharacterTag insecurity_start ned expression neutral.
CharacterTag insecurity_start brad expression nervous.

Content insecurity_doubt: |Brad thinks about the criticism received by Ned and wonders if he is the best fit for this position. Maybe Ned doesn't believe Brad has what it takes to be a researcher. |
Speaker insecurity_doubt brad.
ChoiceLabel insecurity_doubt: |Contemplate skill level |
GoToChoice insecurity_doubt stressed.
GoToChoice insecurity_doubt different_today.
GoToChoice insecurity_doubt say_something.
Effects insecurity_doubt: [set Thread = insecurity]
Conditions insecurity_doubt: [>= BradInsecurityToNed 0]
Reusable insecurity_doubt e0001.
CharacterTag insecurity_doubt ned expression neutral.
CharacterTag insecurity_doubt brad expression nervous.

Content stressed: |The problem is there's too much to do. Not only does Brad need to create the survey, but he needs to conduct it as well. Getting the IRB proposal took weeks of him working late nights. There's just too much riding on this. |
Speaker stressed brad.
ChoiceLabel stressed: |Think about stressors |
GoToChoice stressed grants_funding.
ChoiceCondition stressed stressed_c: [AvailableCheckpoint insecurity]
ChoiceCondition stressed stressed_cc: [AvailableCheckpoint insecurity]
ChoiceCondition stressed stressed_ccc: [AvailableCheckpoint insecurity]
Effects stressed: [set Thread = insecurity]
Conditions stressed.
CharacterTag stressed ned expression neutral.
CharacterTag stressed brad expression nervous.

Content different_today: |Applying for grants and fellowships was really overwhelming. The amount of money you need to do university-level research is mind-boggling. |
Speaker different_today brad.
ChoiceLabel different_today: |Think about financial expectations |
GoToChoice different_today grants_funding.
ChoiceCondition different_today different_today_c: [AvailableCheckpoint insecurity]
ChoiceCondition different_today different_today_cc: [AvailableCheckpoint insecurity]
ChoiceCondition different_today different_today_ccc: [AvailableCheckpoint insecurity]
Effects different_today: [set Thread = insecurity]
Conditions different_today.
CharacterTag different_today ned expression neutral.
CharacterTag different_today brad expression nervous.

Content say_something: |Brad thinks about his feelings of inadequacy, and whether he should bring it up with Ned. Confiding in Ned might make him feel better, but on the other hand, it might make Ned more critical of Brad. Maybe Brad should ignore these feelings and try to stay on Ned's good side. Surely, focusing this meeting on all the progress he's made so far will get him some points with his advisor. |
Speaker say_something brad.
ChoiceLabel say_something: |Reflect on insecurities |
GoToChoice say_something exit_bad.
GoToChoice say_something dissapointed_feeling.
ChoiceCondition say_something say_something_c: [AvailableCheckpoint insecurity]
ChoiceCondition say_something say_something_cc: [AvailableCheckpoint insecurity]
ChoiceCondition say_something say_something_ccc: [AvailableCheckpoint insecurity]
Effects say_something: [set Thread = insecurity]
Conditions say_something.
CharacterTag say_something ned expression neutral.
CharacterTag say_something brad expression nervous.

Content exit_bad: 
	|There isn't a great way to bring up the stress, because it only highlights his flaws. Let's focus on the work at hand instead.|<br><br>
	|Having made this decision, Brad felt a little defeated. His emotions will stay bottled up. |
[end]
Speaker exit_bad brad.
ChoiceLabel exit_bad: |Focus on the progress made |
ChoiceCondition exit_bad exit_bad_c: [AvailableCheckpoint insecurity]
ChoiceCondition exit_bad exit_bad_cc: [AvailableCheckpoint insecurity]
ChoiceCondition exit_bad exit_bad_ccc: [AvailableCheckpoint insecurity]
Effects exit_bad: [set Thread = insecurity]
Conditions exit_bad.
CharacterTag exit_bad ned expression neutral.
CharacterTag exit_bad brad expression nervous.

Content grants_funding: 
	|Brad wants to tell Ned about how stressed he is, but then he thinks about he thousands of dollars he's received to conduct this research. He needs to show that the money is being put to good use. Brad's hand shakes as he grabs his notebook. |<br><br>
	|Ned leans back in his chair, giving Brad a look of concern. Ned asks “Brad, are you alright? You seem a bit frazzled.” |
[end]
Speaker grants_funding brad.
ChoiceLabel grants_funding: |Focus on funding |
GoToChoice grants_funding frazzled.
ChoiceCondition grants_funding grants_funding_c: [AvailableCheckpoint insecurity]
ChoiceCondition grants_funding grants_funding_cc: [AvailableCheckpoint insecurity]
ChoiceCondition grants_funding grants_funding_ccc: [AvailableCheckpoint insecurity]
Effects grants_funding: [set Thread = insecurity]
Conditions grants_funding.
CharacterTag grants_funding ned expression neutral.
CharacterTag grants_funding brad expression nervous.

Content dissapointed_feeling: 
	|Brad takes a deep breath.  "I just don't think I'm handling any of this well," he confesses. "I feel like you’re disappointed in me with the way I'm not —"|<br><br>
	|Ned quickly interrupts, "You've managed to get this far, and you should be proud of yourself. These insecurities you're feeling, they're not an indication of your abilities, they're merely a part of the process." |
[end]
Speaker dissapointed_feeling ned.
ChoiceLabel dissapointed_feeling: |Vocalize fear of disappointing Ned |
GoToChoice dissapointed_feeling frazzled.
ChoiceCondition dissapointed_feeling dissapointed_feeling_c: [AvailableCheckpoint insecurity]
ChoiceCondition dissapointed_feeling dissapointed_feeling_cc: [AvailableCheckpoint insecurity]
ChoiceCondition dissapointed_feeling dissapointed_feeling_ccc: [AvailableCheckpoint insecurity]
Effects dissapointed_feeling: [set Thread = insecurity]
Conditions dissapointed_feeling.
CharacterTag dissapointed_feeling ned expression neutral.
CharacterTag dissapointed_feeling brad expression nervous.

Content frazzled: 
	|“I’m just a bit stressed, that’s all!," says Brad, feigning confidence. |<br><br>
	|Ned gives Brad a look of concern, then says, "You've clearly put a lot of work into this and everything look great so far. Keep up the good work.” |
[end]
Speaker frazzled ned.
ChoiceLabel frazzled: |Feel determined |
GoToChoice frazzled really_hard.
ChoiceCondition frazzled frazzled_c: [AvailableCheckpoint insecurity]
ChoiceCondition frazzled frazzled_cc: [AvailableCheckpoint insecurity]
ChoiceCondition frazzled frazzled_ccc: [AvailableCheckpoint insecurity]
Effects frazzled: [set Thread = insecurity]
Conditions frazzled.
CharacterTag frazzled ned expression happy.
CharacterTag frazzled brad expression nervous.

Content really_hard: 
	|Getting lost in his thoughts Brad almost doesn't notice Ned looking at him with an expression of concern. |<br><br>
	|"You seem rather worried, Brad," Ned says, "Is everything okay?" |<br><br>
	|Brad wanted to respond, to explain the stresses of the survey designs, the IRB proposal, and his fear of disappointment. |<br><br>
	|Instead, he simply says, "I get the sense you're disappointed in my output recently." |
[end]
Speaker really_hard brad.
ChoiceLabel really_hard: |Express feeling disappointed |
GoToChoice really_hard apologizes.
ChoiceCondition really_hard really_hard_c: [AvailableCheckpoint insecurity]
ChoiceCondition really_hard really_hard_cc: [AvailableCheckpoint insecurity]
ChoiceCondition really_hard really_hard_ccc: [AvailableCheckpoint insecurity]
Effects really_hard: [set Thread = insecurity]
Conditions really_hard.
CharacterTag really_hard ned expression sad.
CharacterTag really_hard brad expression sad.

Content apologizes: 
	|Brad anxiously sits across the desk from Ned, his insecurities are overwhelming. Ned glances up from his paperwork with a look of confusion. |<br><br>
	|"Brad, you have been doing an excellent job," he says calmly, "I’m sorry if my judgment was too harsh, but trust me when I say that I can see the amount of time and work you have put into this." |
[end]
Speaker apologizes ned.
ChoiceLabel apologizes: |Await Ned's response |
GoToChoice apologizes accept_apology.
GoToChoice apologizes doubt_apology.
ChoiceCondition apologizes apologizes_c: [AvailableCheckpoint insecurity]
ChoiceCondition apologizes apologizes_cc: [AvailableCheckpoint insecurity]
ChoiceCondition apologizes apologizes_ccc: [AvailableCheckpoint insecurity]
Effects apologizes: [set Thread = insecurity]
Conditions apologizes.
CharacterTag apologizes ned expression confident.
CharacterTag apologizes brad expression nervous.

Content accept_apology: |Hearing these words of affirmation relieves some stress of off Brad’s shoulders. Knowing that his work is being, not only recognized, but praised allows him to feel less pressure from judgement. Brad now knows that he is on the right track with his research, and can reference back to his own work to continue forward. |
Speaker accept_apology brad.
ChoiceLabel accept_apology: |Accept the apology |
GoToChoice accept_apology thanks.
ChoiceCondition accept_apology accept_apology_c: [AvailableCheckpoint insecurity]
ChoiceCondition accept_apology accept_apology_cc: [AvailableCheckpoint insecurity]
ChoiceCondition accept_apology accept_apology_ccc: [AvailableCheckpoint insecurity]
Effects accept_apology: [set Thread = insecurity]
Conditions accept_apology.
CharacterTag accept_apology ned expression confident.
CharacterTag accept_apology brad expression happy.

Content doubt_apology: |Brad wants to accept Ned's kind remarks, but the voice in the back of his head tells him that Ned is lying. If Ned was honest and said his work was inadequate, Brad would have to spend time fixing it, precious time they did not have. Maybe Ned is just telling him he’s doing a good job so that he doesn’t waste even more time than he already has. |
Speaker doubt_apology brad.
ChoiceLabel doubt_apology: |Doubt the apology |
GoToChoice doubt_apology thanks.
ChoiceCondition doubt_apology doubt_apology_c: [AvailableCheckpoint insecurity]
ChoiceCondition doubt_apology doubt_apology_cc: [AvailableCheckpoint insecurity]
ChoiceCondition doubt_apology doubt_apology_ccc: [AvailableCheckpoint insecurity]
Effects doubt_apology: [set Thread = insecurity]
Conditions doubt_apology.
CharacterTag doubt_apology ned expression confident.
CharacterTag doubt_apology brad expression sad.

Content thanks: |"Thanks," Brad says. There is a moment of silence as they look for what to say next. |
Speaker thanks brad.
ChoiceLabel thanks: |Back to business |
GoToChoice thanks end_insecurity.
Effects thanks: [set Thread = insecurity]
Conditions thanks.
CharacterTag thanks ned expression neutral.
CharacterTag thanks brad expression nervous.

Content end_insecurity: |Ned continues to look through the paperwork before saying "I'm glad you spoke to me about this, but now let's get back to the task at hand. Tell me, how are the surveys going? " |
ChoiceLabel end_insecurity: |Continue |
ChoiceCondition end_insecurity end_insecurity_c: [AvailableCheckpoint insecurity]
ChoiceCondition end_insecurity end_insecurity_cc: [AvailableCheckpoint insecurity]
ChoiceCondition end_insecurity end_insecurity_ccc: [AvailableCheckpoint insecurity]
Effects end_insecurity: 
	[set Thread = insecurity]
	[add dont_be_insecure Learnings]
[end]
Conditions end_insecurity.
CharacterTag end_insecurity ned expression neutral.
CharacterTag end_insecurity brad expression nervous.

Content irb_intro: |Brad feels like he’s been letting Ned down with the project as of late. If he talks about how well things are going with the project, maybe Ned will finally be proud of Brad and won’t regret his decision of being his advisor. |
Speaker irb_intro brad.
ChoiceLabel irb_intro: |Consider bringing up project |
GoToChoice irb_intro proud_of_me.
GoToChoice irb_intro survey_was_fun.
GoToChoice irb_intro get_ahead.
ChoiceCondition irb_intro irb_intro_c: [AvailableCheckpoint irb]
Effects irb_intro: 
	[set Thread = irb]
	[add brad_wants_ned_to_be_proud Learnings]
[end]
Conditions irb_intro: [Not [Member irb ClosedThreads]]
Reusable irb_intro e0001.
CharacterTag irb_intro ned expression neutral.
CharacterTag irb_intro brad expression sad.

Content proud_of_me: |“I’ve gotten a lot of good feedback from some of the participants,” Brad informs Ned. |
Speaker proud_of_me brad.
ChoiceLabel proud_of_me: |Talk about how well the project is going |
GoToChoice proud_of_me ned_shocked.
Effects proud_of_me: [set Thread = irb]
Conditions proud_of_me: [Not [Member irb ClosedThreads]]
Reusable proud_of_me e0001.
CharacterTag proud_of_me ned expression confused.
CharacterTag proud_of_me brad expression confident.

Content survey_was_fun: |“Well, I’ve had a lot of fun discussing the survey questions with the parents,” Brad pipes up. |
Speaker survey_was_fun brad.
ChoiceLabel survey_was_fun: |Talk about the survey |
GoToChoice survey_was_fun ned_shocked.
Effects survey_was_fun: [set Thread = irb]
Conditions survey_was_fun: [Not [Member irb ClosedThreads]]
Reusable survey_was_fun e0001.
CharacterTag survey_was_fun ned expression confused.
CharacterTag survey_was_fun brad expression confident.

Content get_ahead: 
	|Knowing that he’s had a reputation for getting stuff done at the last minute, Brad decides to mention his most recent research endeavor to Ned. This’ll definitely help him be in Ned’s favor.|<br><br>
	|“Well, I’ve actually been trying to get ahead in the research project,” Brad tries to say nonchalantly. |
[end]
Speaker get_ahead brad.
ChoiceLabel get_ahead: |Talk about progress on the project |
GoToChoice get_ahead sounds_great.
Effects get_ahead: [set Thread = irb]
Conditions get_ahead: [Not [Member irb ClosedThreads]]
Reusable get_ahead e0001.
CharacterTag get_ahead ned expression confused.
CharacterTag get_ahead brad expression nervous.

Content sounds_great: |Brad notices Ned sitting up a little straighter in his chair. He seems a lot more interested in the conversation now. |
Speaker sounds_great ned.
ChoiceLabel sounds_great: |Continue |
GoToChoice sounds_great sounds_great_2.
Effects sounds_great: [set Thread = irb]
Conditions sounds_great: [Not [Member irb ClosedThreads]]
Reusable sounds_great e0001.
CharacterTag sounds_great ned expression confused.
CharacterTag sounds_great brad expression nervous.

Content sounds_great_2: |“Wow Brad, that’s really good to hear!" says Ned. "I’d like to know more about what you did.” |
Speaker sounds_great_2 ned.
ChoiceLabel sounds_great_2: |Continue |
GoToChoice sounds_great_2 confession_1.
ChoiceCondition sounds_great_2 sounds_great_2_c: [AvailableCheckpoint irb]
ChoiceCondition sounds_great_2 sounds_great_2_cc: [AvailableCheckpoint irb]
Effects sounds_great_2.
Conditions sounds_great_2: [Not [Member irb ClosedThreads]]
Reusable sounds_great_2 e0001.
CharacterTag sounds_great_2 ned expression confused.
CharacterTag sounds_great_2 brad expression nervous.

Content confession_1: |Brad clears his throat, “Well, I kinda handed out a few of the surveys.” |
Speaker confession_1 brad.
ChoiceLabel confession_1: |Tell Ned about the survey |
GoToChoice confession_1 ned_shocked.
Effects confession_1: 
	[set Thread = irb]
	[now [BradAdmittedStudy e0001]]
[end]
Conditions confession_1: [Not [Member irb ClosedThreads]]
Reusable confession_1 e0001.
CharacterTag confession_1 ned expression sad.
CharacterTag confession_1 brad expression nervous.

Content ned_shocked: |“I’m sorry?” Ned places both hands on his desk. "What do you mean? Have you been conducting some of the surveys? You were just supposed to write the questions." |
Speaker ned_shocked ned.
ChoiceLabel ned_shocked: |Continue |
GoToChoice ned_shocked brad_panicking.
ChoiceCondition ned_shocked ned_shocked_c: [AvailableCheckpoint irb]
ChoiceCondition ned_shocked ned_shocked_cc: [AvailableCheckpoint irb]
Effects ned_shocked: [set Thread = irb]
Conditions ned_shocked: [Not [Member irb ClosedThreads]]
Reusable ned_shocked e0001.
CharacterTag ned_shocked ned expression confused.
CharacterTag ned_shocked brad expression nervous.

Content brad_panicking: |Is Ned pissed? Ned had mentioned in the past that Brad needed to run the surveys by him before sending them to participants. But Brad had just wanted to get ahead. |
Speaker brad_panicking brad.
ChoiceLabel brad_panicking: |Uh oh. |
GoToChoice brad_panicking confession_2.
GoToChoice brad_panicking talked_to_parents.
ChoiceCondition brad_panicking brad_panicking_c: [AvailableCheckpoint irb]
ChoiceCondition brad_panicking brad_panicking_cc: [AvailableCheckpoint irb]
Effects brad_panicking: [set Thread = irb]
Conditions brad_panicking: [Not [Member irb ClosedThreads]]
Reusable brad_panicking e0001.
CharacterTag brad_panicking ned expression neutral.
CharacterTag brad_panicking brad expression nervous.

Content confession_2: 
	|It’s better to own up to his mistake and come clean.|<br><br>
	|“I actually sent out a pilot survey to see if there was any interest in participating in our research. The parents were so excited and kept asking me about when it was gonna happen that I just interviewed the parents and sent the survey out to them and their kids.” |
[end]
Speaker confession_2 brad.
ChoiceLabel confession_2: |Tell Ned the truth |
GoToChoice confession_2 with_concern.
ChoiceCondition confession_2 confession_2_c: [AvailableCheckpoint irb]
ChoiceCondition confession_2 confession_2_cc: [AvailableCheckpoint irb]
Effects confession_2: [set Thread = irb]
Conditions confession_2: [Not [Member irb ClosedThreads]]
Reusable confession_2 e0001.
CharacterTag confession_2 ned expression sad.
CharacterTag confession_2 brad expression nervous.

Content with_concern: |"Brad, you know you’re not supposed to start conducting the surveys without herb approval, right?" |
Speaker with_concern ned.
ChoiceLabel with_concern: |Await Ned's response |
GoToChoice with_concern herb.
ChoiceCondition with_concern with_concern_c: [AvailableCheckpoint irb]
ChoiceCondition with_concern with_concern_cc: [AvailableCheckpoint irb]
Effects with_concern: [set Thread = irb]
Conditions with_concern: [Not [Member irb ClosedThreads]]
Reusable with_concern e0001.
CharacterTag with_concern ned expression sad.
CharacterTag with_concern brad expression nervous.

Content talked_to_parents: |“Don’t worry Ned, I didn’t do anything major. I was just casually talking to some parents and our study coincidentally came up. They seemed interested so I sent out a survey to see who would want to participate in our study.” |
Speaker talked_to_parents brad.
ChoiceLabel talked_to_parents: |Brush it off |
GoToChoice talked_to_parents when_approval.
ChoiceCondition talked_to_parents talked_to_parents_c: [AvailableCheckpoint irb]
ChoiceCondition talked_to_parents talked_to_parents_cc: [AvailableCheckpoint irb]
Effects talked_to_parents: [set Thread = irb]
Conditions talked_to_parents: [Not [Member irb ClosedThreads]]
Reusable talked_to_parents e0001.
CharacterTag talked_to_parents ned expression neutral.
CharacterTag talked_to_parents brad expression confident.

Content when_approval: 
	|Ned furrows his eyebrows.|<br><br>
	|“I don’t seem to recall you getting herb approval,” he says. |
[end]
Speaker when_approval ned.
ChoiceLabel when_approval: |Continue |
GoToChoice when_approval herb.
ChoiceCondition when_approval when_approval_c: [AvailableCheckpoint irb]
ChoiceCondition when_approval when_approval_cc: [AvailableCheckpoint irb]
Effects when_approval: [set Thread = irb]
Conditions when_approval: [Not [Member irb ClosedThreads]]
Reusable when_approval e0001.
CharacterTag when_approval ned expression sad.
CharacterTag when_approval brad expression nervous.

Content herb: |“Who is this Herb you keep mentioning, and why do we need his approval?” Brad asks, confused. Who is Herb and why does Ned keep bringing them up? |
Speaker herb brad.
ChoiceLabel herb: |Ask who Herb is |
GoToChoice herb irb.
GoToChoice herb oregano.
ChoiceCondition herb herb_c: [AvailableCheckpoint irb]
ChoiceCondition herb herb_cc: [AvailableCheckpoint irb]
Effects herb: [set Thread = irb]
Conditions herb: [Not [Member irb ClosedThreads]]
Reusable herb e0001.
CharacterTag herb ned expression neutral.
CharacterTag herb brad expression confused.

Content oregano: 
	|Come to think of it, Brad did see Ned going ham with the oregano shaker at the local pizzeria in their college town. Maybe that’s what Ned is talking about. |<br><br>
	|“Could it be that you might be talking about…seasonings? Like oregano?” Brad asks with confusion. |
[end]
Speaker oregano brad.
ChoiceLabel oregano: |Does Ned have a thing for herbs? |
GoToChoice oregano irb.
Effects oregano: [set Thread = irb]
Conditions oregano: [Not [Member irb ClosedThreads]]
Reusable oregano e0001.
CharacterTag oregano ned expression confused.
CharacterTag oregano brad expression confused.

Content irb: 
	|“Oh, sorry,” Ned half chortles. “I pronounce it as “herb” but I’m actually referring to the IRB. It’s an acronym, I-R-B – it stands for <b>Institutional Review Board</b>.” |<br><br>
	|Ned fumbles for some papers.|<br><br>
	|“The IRB reviews research studies to ensure that they comply with applicable regulations, meet commonly accepted ethical standards, follow institutional policies, and adequately protect research participants, especially <b>vulnerable populations</b>.” |
[end]
Speaker irb ned.
ChoiceLabel irb: |Listen to Ned |
GoToChoice irb confession_3.
ChoiceCondition irb irb_c: [AvailableCheckpoint irb]
ChoiceCondition irb irb_cc: [AvailableCheckpoint irb]
Effects irb: 
	[set Thread = irb]
	[add vulnerable_mentioned Learnings]
	[OpenCheckpoint irb confession_3]
[end]
Conditions irb: [Not [Member irb ClosedThreads]]
Reusable irb e0001.
CharacterTag irb ned expression confident.
CharacterTag irb brad expression neutral.

Content confession_3: |“Oh the IRB! Right... The thing is, I kind of started the surveys without approval.” Brad sheepishly looks down at his scuffed-up shoes. |
Speaker confession_3 brad.
ChoiceLabel confession_3: |Confess about starting without approval |
GoToChoice confession_3 ned_dont_press.
Effects confession_3: [set Thread = irb]
Conditions confession_3: [Not [Member irb ClosedThreads]]
Reusable confession_3 e0001.
CharacterTag confession_3 ned expression neutral.
CharacterTag confession_3 brad expression nervous.

Content ned_dont_press: |"No doubt the IRB is a slow process. But, Brad..." Ned takes a sip of coffee and seems to lose himeself in thought. |
Speaker ned_dont_press ned.
ChoiceLabel ned_dont_press: |Continue |
GoToChoice ned_dont_press brad_goes_along.
Effects ned_dont_press: [set Thread = irb]
Conditions ned_dont_press: [Not [Member irb ClosedThreads]]
Reusable ned_dont_press e0001.
CharacterTag ned_dont_press ned expression sad.
CharacterTag ned_dont_press brad expression neutral.

Content bad_feeling: 
	|Ned didn’t really make it clear on whether it is okay to keep working on the project or if he should wait. But now that Brad knows what the IRB is, he feels guilty about conducting his survey. |<br><br>
	|“Hey Ned, thanks for explaining. Based on what you said, I think I’ll pause the study for now and wait until it gets approved before moving forward with the project.” |
[end]
Speaker bad_feeling brad.
ChoiceLabel bad_feeling: |Maybe continuing the surveys is a bad idea |
ChoiceCondition bad_feeling bad_feeling_c: [AvailableCheckpoint irb]
ChoiceCondition bad_feeling bad_feeling_cc: [AvailableCheckpoint irb]
ChoiceCondition bad_feeling bad_feeling_ccc: [AvailableCheckpoint irb]
Effects bad_feeling: [set Thread = irb]
Conditions bad_feeling: [Not [Member irb ClosedThreads]]
Reusable bad_feeling e0001.
CharacterTag bad_feeling ned expression neutral.
CharacterTag bad_feeling brad expression sad.

Content brad_goes_along: |Ned didn’t press it, so it must not be a big deal. If Ned isn’t concerned about the IRB approval, then Brad doesn’t need to be either. |
Speaker brad_goes_along brad.
ChoiceLabel brad_goes_along: |It probably doesn’t matter that much |
ChoiceCondition brad_goes_along brad_goes_along_c: [AvailableCheckpoint irb]
ChoiceCondition brad_goes_along brad_goes_along_cc: [AvailableCheckpoint irb]
ChoiceCondition brad_goes_along brad_goes_along_ccc: [AvailableCheckpoint irb]
Effects brad_goes_along: 
	[set Thread = irb]
	[OpenCheckpoint principles principles_intro]
	[CloseAllCheckpoints irb]
[end]
Conditions brad_goes_along: [Not [Member irb ClosedThreads]]
Reusable brad_goes_along e0001.
CharacterTag brad_goes_along ned expression neutral.
CharacterTag brad_goes_along brad expression confident.

Content principles_intro: |"This white paper," Ned holds it up for emphasis, "is about the core principles of the IRB. Have you read this?" |
Speaker principles_intro ned.
ChoiceLabel principles_intro: |Listen to Ned's IRB explanation |
GoToChoice principles_intro yes_info.
GoToChoice principles_intro no_info.
Effects principles_intro: [set Thread = principles]
Conditions principles_intro: [Not [Member principles ClosedThreads]]
Reusable principles_intro e0001.
CharacterTag principles_intro ned expression neutral.
CharacterTag principles_intro brad expression neutral.

Content yes_info: 
	|Brad thinks back to the training. <i>I'm pretty sure I've seen this before</i>.|<br><br>
	|"I think I've seen it before Ned," says Brad. |
[end]
Speaker yes_info brad.
ChoiceLabel yes_info: |I think so |
GoToChoice yes_info tenants.
Effects yes_info: [set Thread = principles]
Conditions yes_info: [Not [Member principles ClosedThreads]]
Reusable yes_info e0001.
CharacterTag yes_info ned expression neutral.
CharacterTag yes_info brad expression confident.

Content no_info: 
	|Brad wasn't sure if he was meant to have gone through this during his ethics training. |<br><br>
	|"I don't think so, Ned. Sorry." |
[end]
Speaker no_info brad.
ChoiceLabel no_info: |No |
GoToChoice no_info tenants.
Effects no_info: [set Thread = principles]
Conditions no_info: [Not [Member principles ClosedThreads]]
Reusable no_info e0001.
CharacterTag no_info ned expression sad.
CharacterTag no_info brad expression confused.

Content tenants: |Ned sighs. "The IRB has a lot on their plate - they have to ensure <b>beneficence</b>, <b>justice</b>, and <b>respect for persons</b>. We should probably talk about each of these." |
Speaker tenants ned.
ChoiceLabel tenants: |Listen to Ned's explanation |
ChoiceCondition tenants tenants_c: [AvailableCheckpoint principles]
ChoiceCondition tenants tenants_cc: [AvailableCheckpoint principles]
ChoiceCondition tenants tenants_ccc: [AvailableCheckpoint principles]
Effects tenants: 
	[set Thread = principles]
	[UnlockPrinciples]
	[add vulnerable_mentioned Learnings]
	[CloseAllCheckpoints principles]
[end]
Conditions tenants: [Not [Member principles ClosedThreads]]
Reusable tenants e0001.
CharacterTag tenants ned expression neutral.
CharacterTag tenants brad expression neutral.

Content beneficence_intro: |"You mentioned beneficence?" asks Brad. |
Speaker beneficence_intro brad.
ChoiceLabel beneficence_intro: |Ask Ned about beneficence |
GoToChoice beneficence_intro beneficence_define.
Effects beneficence_intro: 
	[set Thread = beneficence]
	[add beneficence_intro Learnings]
[end]
Conditions beneficence_intro: [Not [Member beneficence ClosedThreads]]
Reusable beneficence_intro e0001.
CharacterTag beneficence_intro ned expression neutral.
CharacterTag beneficence_intro brad expression neutral.

Content beneficence_define: |Ned leans back in his ergonomic chair. "Beneficence is the idea that research should not harm participants. Researchers need to keep the greater good and wellbeing of participants in mind when choosing the next course of action." |
Speaker beneficence_define ned.
ChoiceLabel beneficence_define: |Listen to Ned's explanation of benefience |
GoToChoice beneficence_define research_good_thing.
GoToChoice beneficence_define research_is_beneficial.
ChoiceCondition beneficence_define beneficence_define_c: [AvailableCheckpoint beneficence]
ChoiceCondition beneficence_define beneficence_define_cc: [AvailableCheckpoint beneficence]
ChoiceCondition beneficence_define beneficence_define_ccc: [AvailableCheckpoint beneficence]
Effects beneficence_define: [set Thread = beneficence]
Conditions beneficence_define: [Not [Member beneficence ClosedThreads]]
Reusable beneficence_define e0001.
CharacterTag beneficence_define ned expression neutral.
CharacterTag beneficence_define brad expression neutral.

Content research_good_thing: |Brad scratches his head. "By conducting research, isn't that already good enough? It should be a beneficial thing in and of itself. How exactly would it harm participants?" |
Speaker research_good_thing brad.
ChoiceLabel research_good_thing: |Isn't research beneficial though? |
GoToChoice research_good_thing not_enough.
Effects research_good_thing: [set Thread = beneficence]
Conditions research_good_thing: [Not [Member beneficence ClosedThreads]]
Reusable research_good_thing e0001.
CharacterTag research_good_thing ned expression neutral.
CharacterTag research_good_thing brad expression confused.

Content not_enough: |"Well, yes, research is usually for the greater good. But that's not enough; the benefit of conducting the research must outweigh any potential negative harm to the participants." |
Speaker not_enough ned.
ChoiceLabel not_enough: |Continue |
GoToChoice not_enough brad_confused.
ChoiceCondition not_enough not_enough_c: [AvailableCheckpoint beneficence]
ChoiceCondition not_enough not_enough_cc: [AvailableCheckpoint beneficence]
ChoiceCondition not_enough not_enough_ccc: [AvailableCheckpoint beneficence]
Effects not_enough: 
	[set Thread = beneficence]
	[OpenCheckpoint beneficence brad_confused]
[end]
Conditions not_enough: [Not [Member beneficence ClosedThreads]]
Reusable not_enough e0001.
CharacterTag not_enough ned expression neutral.
CharacterTag not_enough brad expression confused.

Content research_is_beneficial: |Well, that's a given. Brad feels as though he's already planned out his surveys and study in a considerate manner. He nods in response. "There's no need to worry, Ned. My research is beneficial!" |
Speaker research_is_beneficial brad.
ChoiceLabel research_is_beneficial: |Affirm that their research is beneficial |
GoToChoice research_is_beneficial everyone_thinks_research_good.
Effects research_is_beneficial: [set Thread = beneficence]
Conditions research_is_beneficial: [Not [Member beneficence ClosedThreads]]
Reusable research_is_beneficial e0001.
CharacterTag research_is_beneficial ned expression neutral.
CharacterTag research_is_beneficial brad expression confident.

Content everyone_thinks_research_good: |Ned sighs. "You see Brad, everyone thinks that their research is good. But research has just as much potential to cause great harm." |
Speaker everyone_thinks_research_good ned.
ChoiceLabel everyone_thinks_research_good: |Continue |
GoToChoice everyone_thinks_research_good brad_confused.
ChoiceCondition everyone_thinks_research_good everyone_thinks_research_good_c: [AvailableCheckpoint beneficence]
ChoiceCondition everyone_thinks_research_good everyone_thinks_research_good_cc: [AvailableCheckpoint beneficence]
ChoiceCondition everyone_thinks_research_good everyone_thinks_research_good_ccc: [AvailableCheckpoint beneficence]
Effects everyone_thinks_research_good: 
	[set Thread = beneficence]
	[OpenCheckpoint beneficence brad_confused]
[end]
Conditions everyone_thinks_research_good: [Not [Member beneficence ClosedThreads]]
Reusable everyone_thinks_research_good e0001.
CharacterTag everyone_thinks_research_good ned expression sad.
CharacterTag everyone_thinks_research_good brad expression confused.

Content brad_confused: |"I'm not quite sure I understand beneficence. Could you provide an example?" Why must his advisor be so vague? |
Speaker brad_confused brad.
ChoiceLabel brad_confused: |Ask Ned to clarify beneficence |
GoToChoice brad_confused medical_trials.
Effects brad_confused: [set Thread = beneficence]
Conditions brad_confused: [Not [Member beneficence ClosedThreads]]
Reusable brad_confused e0001.
CharacterTag brad_confused ned expression neutral.
CharacterTag brad_confused brad expression confused.

Content medical_trials: 
	|Ned scratches his mustache, furrowing his brows. |<br><br>
	|"So for example, medical trials have to use the lowest possible dosage when testing new medication. They also have to provide services to ensure the health and safetly of their participants. Does that make sense?" |
[end]
Speaker medical_trials ned.
ChoiceLabel medical_trials: |Continue |
GoToChoice medical_trials brad_unsure.
GoToChoice medical_trials brad_curious.
GoToChoice medical_trials brad_cocky.
ChoiceCondition medical_trials medical_trials_c: [AvailableCheckpoint beneficence]
ChoiceCondition medical_trials medical_trials_cc: [AvailableCheckpoint beneficence]
ChoiceCondition medical_trials medical_trials_ccc: [AvailableCheckpoint beneficence]
Effects medical_trials: [set Thread = beneficence]
Conditions medical_trials: [Not [Member beneficence ClosedThreads]]
Reusable medical_trials e0001.
CharacterTag medical_trials ned expression neutral.
CharacterTag medical_trials brad expression confused.

Content brad_unsure: 
	|That...still makes no sense. Kinda like how Brad couldn't understand polypeptide structures from the required CHEM 1 series. As to why he needed to take chemistry courses as a psych researcher was beyond him. |<br><br>
	|He nods in agreement, but still is unsure of what Ned is talking about. In the end, it's just all about how he has to consider the good of participants, right? That's easy enough. |
[end]
Speaker brad_unsure brad.
ChoiceLabel brad_unsure: |Unsurely nod in agreement |
GoToChoice brad_unsure do_u_get_it.
Effects brad_unsure: 
	[set Thread = beneficence]
	[set BradInsecurityToNed = BradInsecurityToNed + 1]
[end]
Conditions brad_unsure: [Not [Member beneficence ClosedThreads]]
Reusable brad_unsure e0001.
CharacterTag brad_unsure ned expression neutral.
CharacterTag brad_unsure brad expression confused.

Content brad_cocky: |No duh, Brad thinks to himself. Did Ned really have to provide such a given? Besides, there's no harm in just asking survey questions. "Well of course, but I'm just asking questions to participants. It's not like I'm dealing drugs." |
Speaker brad_cocky brad.
ChoiceLabel brad_cocky: |Affirm that they're just asking questions here |
GoToChoice brad_cocky side_effects.
ChoiceCondition brad_cocky brad_cocky_c: [AvailableCheckpoint beneficence]
ChoiceCondition brad_cocky brad_cocky_cc: [AvailableCheckpoint beneficence]
ChoiceCondition brad_cocky brad_cocky_ccc: [AvailableCheckpoint beneficence]
Effects brad_cocky: [set Thread = beneficence]
Conditions brad_cocky: [Not [Member beneficence ClosedThreads]]
Reusable brad_cocky e0001.
CharacterTag brad_cocky ned expression neutral.
CharacterTag brad_cocky brad expression confident.

Content brad_curious: |"Thanks for explaining, but how is this related to our situation?" Brad asks. |
Speaker brad_curious brad.
ChoiceLabel brad_curious: |Ask how this is connected to the survey |
GoToChoice brad_curious side_effects.
Effects brad_curious: [set Thread = beneficence]
Conditions brad_curious: [Not [Member beneficence ClosedThreads]]
Reusable brad_curious e0001.
CharacterTag brad_curious ned expression neutral.
CharacterTag brad_curious brad expression confused.

Content do_u_get_it: |Ned narrows his eyes at Brad."Do you get what I'm trying to say, Brad?" His advisor's tone feels awfully much more stern now. |
Speaker do_u_get_it ned.
ChoiceLabel do_u_get_it: |Continue |
GoToChoice do_u_get_it brad_silent.
ChoiceCondition do_u_get_it do_u_get_it_c: [AvailableCheckpoint beneficence]
Effects do_u_get_it: [set Thread = beneficence]
Conditions do_u_get_it: [Not [Member beneficence ClosedThreads]]
Reusable do_u_get_it e0001.
CharacterTag do_u_get_it ned expression neutral.
CharacterTag do_u_get_it brad expression nervous.

Content brad_silent: |Feeling the immense pressure to response, Brad sits in silence, unsure of how to answer this question. |
Speaker brad_silent brad.
ChoiceLabel brad_silent: |Sit in silence |
GoToChoice brad_silent brad_notices.
Effects brad_silent: [set Thread = beneficence]
Conditions brad_silent: [Not [Member beneficence ClosedThreads]]
Reusable brad_silent e0001.
CharacterTag brad_silent ned expression neutral.
CharacterTag brad_silent brad expression nervous.

Content brad_notices: |Brad begins to notice Ned's unrelenting, eagle-eyed stare. Perhaps his advisor had sensed his fear. |
Speaker brad_notices brad.
ChoiceLabel brad_notices: |Notice Ned's expression |
GoToChoice brad_notices u_dont_understand.
Effects brad_notices: [set Thread = beneficence]
Conditions brad_notices: [Not [Member beneficence ClosedThreads]]
Reusable brad_notices e0001.
CharacterTag brad_notices ned expression confident.
CharacterTag brad_notices brad expression nervous.

Content u_dont_understand: |Ned softens his expression, since Brad is clearly unresponsive."I get the feeling that you don't get what I'm trying to say here, so what if I frame it like this?" |
Speaker u_dont_understand ned.
ChoiceLabel u_dont_understand: |Continue |
GoToChoice u_dont_understand side_effects.
Effects u_dont_understand: [set Thread = beneficence]
Conditions u_dont_understand: [Not [Member beneficence ClosedThreads]]
Reusable u_dont_understand e0001.
CharacterTag u_dont_understand ned expression neutral.
CharacterTag u_dont_understand brad expression confused.

Content side_effects: |"I know that we aren't dealing any drugs here, but it's still important that you understand this principle, Brad. With any type of research, even just asking questions in a survey, there are a lot of unknowns. Those unknowns can accidentally cause harm to your participants, regardless of your field of study." |
Speaker side_effects ned.
ChoiceLabel side_effects: |Wait for Ned's response |
GoToChoice side_effects avoid_harm.
GoToChoice side_effects apply_principle.
ChoiceCondition side_effects side_effects_c: [AvailableCheckpoint beneficence]
ChoiceCondition side_effects side_effects_cc: [AvailableCheckpoint beneficence]
ChoiceCondition side_effects side_effects_ccc: [AvailableCheckpoint beneficence]
Effects side_effects: 
	[set Thread = beneficence]
	[OpenCheckpoint beneficence side_effects_transition]
[end]
Conditions side_effects: [Not [Member beneficence ClosedThreads]]
Reusable side_effects e0001.
CharacterTag side_effects ned expression confident.
CharacterTag side_effects brad expression neutral.

Content side_effects_transition: 
	|"Can we talk a little more about beneficence?" asks Brad. |<br><br>
	|"Go ahead. What do you want to know?" Ned nods. |
[end]
Speaker side_effects_transition brad.
ChoiceLabel side_effects_transition: |Shift back to beneficence |
GoToChoice side_effects_transition avoid_harm.
GoToChoice side_effects_transition apply_principle.
Effects side_effects_transition: [set Thread = beneficence]
Conditions side_effects_transition: [Not [Member beneficence ClosedThreads]]
Reusable side_effects_transition e0001.
CharacterTag side_effects_transition ned expression neutral.
CharacterTag side_effects_transition brad expression confused.

Content avoid_harm: |"Okay, I get that research should avoid harm. But how is it even possible to conduct research and know for sure that you won't harm any participants?" |
Speaker avoid_harm brad.
ChoiceLabel avoid_harm: |Ask Ned if avoiding harm is even possible |
GoToChoice avoid_harm figuring_out.
ChoiceCondition avoid_harm avoid_harm_c: [AvailableCheckpoint beneficence]
Effects avoid_harm: [set Thread = beneficence]
Conditions avoid_harm: [Not [Member beneficence ClosedThreads]]
Reusable avoid_harm e0001.
CharacterTag avoid_harm ned expression neutral.
CharacterTag avoid_harm brad expression confused.

Content apply_principle: |"So, in practice, how do you actually apply this principle?" |
Speaker apply_principle brad.
ChoiceLabel apply_principle: |Ask Ned how this works in practice |
GoToChoice apply_principle figuring_out.
Effects apply_principle: [set Thread = beneficence]
Conditions apply_principle: [Not [Member beneficence ClosedThreads]]
Reusable apply_principle e0001.
CharacterTag apply_principle ned expression neutral.
CharacterTag apply_principle brad expression confused.

Content figuring_out: |"Great question! Essentially, to the best of your ability, you need to minimize any potential harm and maximize the benefits of your research, beyond what you are obligated to. It's more of a guiding philosophy than an actual rule." |
Speaker figuring_out ned.
ChoiceLabel figuring_out: |Listen to Ned's answer |
GoToChoice figuring_out makes_sense.
ChoiceCondition figuring_out figuring_out_c: [AvailableCheckpoint beneficence]
ChoiceCondition figuring_out figuring_out_cc: [AvailableCheckpoint beneficence]
ChoiceCondition figuring_out figuring_out_ccc: [AvailableCheckpoint beneficence]
Effects figuring_out: 
	[set Thread = beneficence]
	[CloseAllCheckpoints beneficence]
	[add beneficence Learnings]
[end]
Conditions figuring_out: [Not [Member beneficence ClosedThreads]]
Reusable figuring_out e0001.
CharacterTag figuring_out ned expression confident.
CharacterTag figuring_out brad expression neutral.

Content resolution_intro: |"So about the surveys I conducted," begins Brad. "We didn't break any laws but I see now that I really messed up." |
Speaker resolution_intro brad.
ChoiceLabel resolution_intro: |Shift back to the surveys |
GoToChoice resolution_intro what_is_plan.
Effects resolution_intro: 
	[set Thread = resolution]
	[add boldness Learnings]
[end]
Conditions resolution_intro.
Reusable resolution_intro e0001.
CharacterTag resolution_intro ned expression neutral.
CharacterTag resolution_intro brad expression sad.

Content what_is_plan: |"I just want to know that you understand the seriousness of what you've done," says Ned. "What is our plan for proceeding with the project?" |
Speaker what_is_plan ned.
ChoiceLabel what_is_plan: |Continue |
GoToChoice what_is_plan resolution_complete.
GoToChoice what_is_plan brad_thinks_ready.
GoToChoice what_is_plan brad_not_ready.
Effects what_is_plan: [set Thread = resolution]
Conditions what_is_plan.
Reusable what_is_plan e0001.
CharacterTag what_is_plan ned expression neutral.
CharacterTag what_is_plan brad expression sad.

Content brad_thinks_ready: |"I understand, Ned, the IRB seems pretty important based on what you're saying. I messed up." |
Speaker brad_thinks_ready brad.
ChoiceLabel brad_thinks_ready: |Assert understanding |
GoToChoice brad_thinks_ready try_again.
Effects brad_thinks_ready: [set Thread = resolution]
Conditions brad_thinks_ready: [Not [BradLearned]][= Thread resolution]
Reusable brad_thinks_ready e0001.
CharacterTag brad_thinks_ready ned expression neutral.
CharacterTag brad_thinks_ready brad expression sad.

Content brad_not_ready: |"This conversation has been useful, but I still have some more questions about the IRB," says Brad. |
Speaker brad_not_ready brad.
ChoiceLabel brad_not_ready: |Ask more questions |
GoToChoice brad_not_ready try_again.
Effects brad_not_ready: [set Thread = resolution]
Conditions brad_not_ready: [= Thread resolution]
Reusable brad_not_ready e0001.
CharacterTag brad_not_ready ned expression neutral.
CharacterTag brad_not_ready brad expression confused.

Content try_again: 
	|"I think we still have more to discuss"|<br><br>
	||[DoMentionOfExtraThread]| |
[end]
Speaker try_again ned.
ChoiceLabel try_again: |Listen to Ned |
ChoiceCondition try_again try_again_c: [AvailableCheckpoint agenda]
ChoiceCondition try_again try_again_cc: [AvailableCheckpoint agenda]
ChoiceCondition try_again try_again_ccc: [AvailableCheckpoint agenda]
Effects try_again: [set Thread = resolution]
Conditions try_again: [= Thread resolution]
Reusable try_again e0001.
CharacterTag try_again ned expression neutral.
CharacterTag try_again brad expression neutral.

Content resolution_complete: 
	|"Well, it's important that an outside entity, the IRB, has approved that our study is complying with informed consent practices such that it maintains respect for persons, beneficence, and justice. Did I get that right?" Brad asks.|<br><br>
	|"We should immediately stop the survey, get rid of any data I already collected, and inform the IRB that I made this mistake." |
[end]
Speaker resolution_complete brad.
ChoiceLabel resolution_complete: |Show that he has learned |
GoToChoice resolution_complete end.
Effects resolution_complete: [set Thread = resolution]
Conditions resolution_complete: [BradLearned][= Thread resolution]
Reusable resolution_complete e0001.
CharacterTag resolution_complete ned expression neutral.
CharacterTag resolution_complete brad expression confident.

Content end: 
	|"That sounds right to me, I'm glad you listened today Brad." |<br><br>
	|"This could have been really bad, but I'm glad we caught it now."|<br><br>
	|***|<br><br>
	|Thank you for playing! Please be sure to fill out the post-play survey here: <color=blue><u><link=surveylink>Post-Survey</link></u></color> |
[end]
Speaker end ned.
ChoiceLabel end: |Fin |
Effects end: [set Thread = resolution]
Conditions end: [= Thread resolution]
Reusable end e0001.
CharacterTag end ned expression happy.
CharacterTag end brad expression happy.

Content bus: |Brad hesitates outside of the door. He is already late. The bus had taken an extra thirty minutes to get to campus this morning, and now he doesn’t have enough time to prepare as much as he would have liked. |
Speaker bus brad.
ChoiceLabel bus: |Take a moment to reflect |
ChoiceCondition bus bus_c: [AvailableCheckpoint insecurity]
ChoiceCondition bus bus_cc: [AvailableCheckpoint insecurity]
ChoiceCondition bus bus_ccc: [AvailableCheckpoint insecurity]
Effects bus: [set Thread = reflection]
Conditions bus.
CharacterTag bus ned expression neutral.
CharacterTag bus brad expression nervous.

Content lament: |Brad dreaded the impending assumption that he hadn't done anything this week. Sure, there had been weeks where he'd been more focused on his semi-pro hacky sack career, and Ned had noticed; but, he'd been in the lab the past seven days! Surely this time he deserved some recognition. |
Speaker lament brad.
ChoiceLabel lament: |Ponder Ned's assumptions |
Effects lament: [set Thread = reflection]
Conditions lament.
CharacterTag lament ned expression neutral.
CharacterTag lament brad expression nervous.

Content overworked: |Some of Brad's friends were in a lab that encouraged a four day work week, versus the six days Brad works. How can someone who works even on the weekends still have a reputation of laziness? |
Speaker overworked brad.
ChoiceLabel overworked: |Think about reputation |
Effects overworked: [set Thread = reflection]
Conditions overworked.
CharacterTag overworked ned expression neutral.
CharacterTag overworked brad expression sad.

Content subjects: |Brad thinks about the participant surveys he had conducted over the past week. He had been so proud of his progress, even though he wasn't technically supposed to start yet. He managed to find a way around the IRB requirements and he is quite pleased with all that he accomplished despite the challenges. Perhaps he will get the grant he's gunning for after all. |
Speaker subjects brad.
ChoiceLabel subjects: |Feel proud of accomplishments |
Effects subjects: [set Thread = reflection]
Conditions subjects.
CharacterTag subjects ned expression neutral.
CharacterTag subjects brad expression happy.

Content silence: |There is a moment of silence as Brad struggles to find something to say. The moment stretches to a few seconds. Ned looks on expectantly. |
Speaker silence brad.
ChoiceLabel silence: |Consider what to say |
Effects silence: [set Thread = reflection]
Conditions silence.
CharacterTag silence ned expression neutral.
CharacterTag silence brad expression neutral.

Content reflect: 
	|Brad found out pretty soon after arriving at the lab that he had not been Ned's first choice, as his pick ended up at another university.|<br><br>
	|Ned was hard on Brad. Had him triple-check his data, show up early to their lab meetings, and was quick to correct his spoken mistakes. Brad valued his attention, when he received it. |
[end]
Speaker reflect brad.
ChoiceLabel reflect: |Reflect on past |
ChoiceCondition reflect reflect_c: [AvailableCheckpoint entry]
ChoiceCondition reflect reflect_cc: [AvailableCheckpoint entry]
ChoiceCondition reflect reflect_ccc: [AvailableCheckpoint entry]
Effects reflect: [set Thread = reflection]
Conditions reflect: [= Thread entry]
CharacterTag reflect ned expression nervous.
CharacterTag reflect brad expression nervous.

Content justice_intro: |"I am confused by something. Even if a person gets harmed by the research doesn't society still benefit at the end?" |
Speaker justice_intro brad.
ChoiceLabel justice_intro: |Ask about justice |
GoToChoice justice_intro brad_jokes.
GoToChoice justice_intro why_board.
Effects justice_intro: 
	[set Thread = justice]
	[add justice_intro Learnings]
[end]
Conditions justice_intro: [Not [Member justice ClosedThreads]]
Reusable justice_intro e0001.
CharacterTag justice_intro ned expression neutral.
CharacterTag justice_intro brad expression confused.

Content brad_jokes: |"I mean, sure it sucks that they were part of a bad experiment, but hey! It's not like our data isn't being harvested all the time anyway! At least they're getting paid." |
Speaker brad_jokes brad.
ChoiceLabel brad_jokes: |Crack a joke |
GoToChoice brad_jokes ned_corrects.
Effects brad_jokes: [set Thread = justice]
Conditions brad_jokes: [Not [Member justice ClosedThreads]]
Reusable brad_jokes e0001.
CharacterTag brad_jokes ned expression neutral.
CharacterTag brad_jokes brad expression happy.

Content why_board: |"It seems like the worst thing that can happen with bad ethical practices is that people are just made uncomfortable. Why would this need a whole board to overview it?" |
Speaker why_board brad.
ChoiceLabel why_board: |Ask for clarification |
GoToChoice why_board principles_important.
Effects why_board: [set Thread = justice]
Conditions why_board: [Not [Member justice ClosedThreads]]
Reusable why_board e0001.
CharacterTag why_board ned expression neutral.
CharacterTag why_board brad expression confused.

Content ned_corrects: |"The historical events behind these principles are very sensitive topics, and should be handled with empathy for the people affected by them." |
Speaker ned_corrects ned.
ChoiceLabel ned_corrects: |Continue |
GoToChoice ned_corrects brad_apologizes.
GoToChoice ned_corrects just_making_a_joke.
ChoiceCondition ned_corrects ned_corrects_c: [AvailableCheckpoint justice]
ChoiceCondition ned_corrects ned_corrects_cc: [AvailableCheckpoint justice]
ChoiceCondition ned_corrects ned_corrects_ccc: [AvailableCheckpoint justice]
Effects ned_corrects: [set Thread = justice]
Conditions ned_corrects: [Not [Member justice ClosedThreads]]
Reusable ned_corrects e0001.
CharacterTag ned_corrects ned expression confident.
CharacterTag ned_corrects brad expression neutral.

Content principles_important: |"I understand your confusion, but in the past, violations of the principle of justice has led to negative impacts on the lives of various people. Including substantial harm in some, specifically marginalized, populations." |
Speaker principles_important ned.
ChoiceLabel principles_important: |Continue |
GoToChoice principles_important wym.
ChoiceCondition principles_important principles_important_c: [AvailableCheckpoint justice]
ChoiceCondition principles_important principles_important_cc: [AvailableCheckpoint justice]
ChoiceCondition principles_important principles_important_ccc: [AvailableCheckpoint justice]
Effects principles_important: 
	[set Thread = justice]
	[OpenCheckpoint justice wym]
[end]
Conditions principles_important: [Not [Member justice ClosedThreads]]
Reusable principles_important e0001.
CharacterTag principles_important ned expression confident.
CharacterTag principles_important brad expression neutral.

Content just_making_a_joke: |"I was just trying to make a joke. Didn't know this was so serious." |
Speaker just_making_a_joke brad.
ChoiceLabel just_making_a_joke: |Clarify statement |
GoToChoice just_making_a_joke dont_take_lightly.
ChoiceCondition just_making_a_joke just_making_a_joke_c: [AvailableCheckpoint justice]
ChoiceCondition just_making_a_joke just_making_a_joke_cc: [AvailableCheckpoint justice]
ChoiceCondition just_making_a_joke just_making_a_joke_ccc: [AvailableCheckpoint justice]
Effects just_making_a_joke: [set Thread = justice]
Conditions just_making_a_joke: [Not [Member justice ClosedThreads]]
Reusable just_making_a_joke e0001.
CharacterTag just_making_a_joke ned expression neutral.
CharacterTag just_making_a_joke brad expression sad.

Content brad_apologizes: |"I'm sorry for my insensitivity, but I'm just wondering why this is so serious?" |
Speaker brad_apologizes brad.
ChoiceLabel brad_apologizes: |Apologize for joke |
GoToChoice brad_apologizes principles_important.
Effects brad_apologizes: [set Thread = justice]
Conditions brad_apologizes: [Not [Member justice ClosedThreads]]
Reusable brad_apologizes e0001.
CharacterTag brad_apologizes ned expression neutral.
CharacterTag brad_apologizes brad expression confused.

Content dont_take_lightly: |"Brad, I understand that you're trying to take this lightly, but this isn't a light topic. In the past, violations of the guidelines have led to catastrophic harm to people, so it's especially important to approach these topics with sensitivity." |
Speaker dont_take_lightly ned.
ChoiceLabel dont_take_lightly: |Continue |
GoToChoice dont_take_lightly wym.
ChoiceCondition dont_take_lightly dont_take_lightly_c: [AvailableCheckpoint justice]
ChoiceCondition dont_take_lightly dont_take_lightly_cc: [AvailableCheckpoint justice]
ChoiceCondition dont_take_lightly dont_take_lightly_ccc: [AvailableCheckpoint justice]
Effects dont_take_lightly: 
	[set Thread = justice]
	[OpenCheckpoint justice wym]
[end]
Conditions dont_take_lightly: [Not [Member justice ClosedThreads]]
Reusable dont_take_lightly e0001.
CharacterTag dont_take_lightly ned expression sad.
CharacterTag dont_take_lightly brad expression neutral.

Content wym: |"Wait, people were harmed? Like who? I think a specific example would help." |
Speaker wym brad.
ChoiceLabel wym: |Ask about harmed populations |
GoToChoice wym syphilis.
Effects wym: [set Thread = justice]
Conditions wym: [Not [Member justice ClosedThreads]]
Reusable wym e0001.
CharacterTag wym ned expression neutral.
CharacterTag wym brad expression confused.

Content syphilis: 
	|"Yeah, sure. The Tuskegee Syphilis Study was a pretty big example," begins Ned.|<br><br>
	|"In this study, African American men were not told they had syphilis nor were they offered treatment, even after penicillin became available as a cure in the 1940s. Many participants suffered unnecessarily, and some even died from complications of untreated syphilis. This disregard for ethical guidelines underscores the importance of adhering to IRB principles to prevent harm to research participants." |
[end]
Speaker syphilis ned.
ChoiceLabel syphilis: |Continue |
GoToChoice syphilis violation_of_something.
GoToChoice syphilis violation_of_ben.
ChoiceCondition syphilis syphilis_c: [AvailableCheckpoint justice]
ChoiceCondition syphilis syphilis_cc: [AvailableCheckpoint justice]
ChoiceCondition syphilis syphilis_ccc: [AvailableCheckpoint justice]
Effects syphilis: [set Thread = justice]
Conditions syphilis: [Not [Member justice ClosedThreads]]
Reusable syphilis e0001.
CharacterTag syphilis ned expression sad.
CharacterTag syphilis brad expression sad.

Content violation_of_ben: |"So, did they violate beneficence?" |
Speaker violation_of_ben brad.
ChoiceLabel violation_of_ben: |Ask if this is about beneficence |
GoToChoice violation_of_ben yes_beneficence.
Effects violation_of_ben: [set Thread = justice]
Conditions violation_of_ben: [Not [Member justice ClosedThreads]]
Reusable violation_of_ben e0001.
CharacterTag violation_of_ben ned expression neutral.
CharacterTag violation_of_ben brad expression confused.

Content yes_beneficence: |"Sort of. While, yes, the study did not protect them from harm, it can be better categorized as a violation of Justice." |
Speaker yes_beneficence ned.
ChoiceLabel yes_beneficence: |Continue |
GoToChoice yes_beneficence violation_of_justice.
Effects yes_beneficence: [set Thread = justice]
Conditions yes_beneficence: [Not [Member justice ClosedThreads]]
Reusable yes_beneficence e0001.
CharacterTag yes_beneficence ned expression sad.
CharacterTag yes_beneficence brad expression neutral.

Content violation_of_something: |"So, what principle was violated in the syphilus study then?" |
Speaker violation_of_something brad.
ChoiceLabel violation_of_something: |Ask which principles were violated |
GoToChoice violation_of_something violation_of_justice.
Effects violation_of_something: [set Thread = justice]
Conditions violation_of_something: [Not [Member justice ClosedThreads]]
Reusable violation_of_something e0001.
CharacterTag violation_of_something ned expression neutral.
CharacterTag violation_of_something brad expression confused.

Content violation_of_justice: |"This study was a violation of Justice, which means that the people were denied a benefit without a good reason or a burden was imposed onto them." |
Speaker violation_of_justice ned.
ChoiceLabel violation_of_justice: |Continue |
ChoiceCondition violation_of_justice violation_of_justice_c: [AvailableCheckpoint justice]
ChoiceCondition violation_of_justice violation_of_justice_cc: [AvailableCheckpoint justice]
ChoiceCondition violation_of_justice violation_of_justice_ccc: [AvailableCheckpoint justice]
Effects violation_of_justice: 
	[set Thread = justice]
	[CloseAllCheckpoints justice]
	[add justice Learnings]
[end]
Conditions violation_of_justice: [Not [Member justice ClosedThreads]]
Reusable violation_of_justice e0001.
CharacterTag violation_of_justice ned expression sad.
CharacterTag violation_of_justice brad expression sad.

Content you_remember: 
	|"Like the Milgram study?" Asks Brad.|<br><br>
	|"Yes," says Ned, "So, you are aware of the Milgram study?" |
[end]
Speaker you_remember brad.
ChoiceLabel you_remember: |Ask about the Milgram study |
GoToChoice you_remember milgram_confusion.
GoToChoice you_remember omg_yes.
ChoiceCondition you_remember you_remember_c: [AvailableCheckpoint milgram]
Effects you_remember: 
	[set Thread = milgram]
	[add milgram_intro Learnings]
[end]
Conditions you_remember: 
	[Member milgram_mentioned Learnings]
	[Not [Member milgram ClosedThreads]]
[end]
Reusable you_remember e0001.
CharacterTag you_remember ned expression neutral.
CharacterTag you_remember brad expression nervous.

Content milgram_confusion: |Brad pipes up. "That's the one where they made up a fake prison right?" |
Speaker milgram_confusion brad.
ChoiceLabel milgram_confusion: |Yes, it was the prison one |
GoToChoice milgram_confusion milgram_blank_stare.
Effects milgram_confusion: [set Thread = milgram]
Conditions milgram_confusion: [Not [Member milgram ClosedThreads]]
Reusable milgram_confusion e0001.
CharacterTag milgram_confusion ned expression neutral.
CharacterTag milgram_confusion brad expression happy.

Content milgram_blank_stare: |Ned blankly stares at Brad. As he feels the intense stare of his advisor, he can feel his own soul leave his body. |
Speaker milgram_blank_stare brad.
ChoiceLabel milgram_blank_stare: |Continue |
GoToChoice milgram_blank_stare describe_milgram_2.
ChoiceCondition milgram_blank_stare milgram_blank_stare_c: [AvailableCheckpoint milgram]
Effects milgram_blank_stare: [set Thread = milgram][set BradInsecurityToNed = BradInsecurityToNed + 1]
Conditions milgram_blank_stare: [Not [Member milgram ClosedThreads]]
Reusable milgram_blank_stare e0001.
CharacterTag milgram_blank_stare ned expression neutral.
CharacterTag milgram_blank_stare brad expression neutral.

Content omg_yes: 
	|The Milgram experiement, how could Brad forget! It was one of his favorite experiments covered in his Psychology classes.|<br><br>
	|"Yeah, I remember the Milgram experiment, with the electric shocks," Brad responds. |
[end]
Speaker omg_yes brad.
ChoiceLabel omg_yes: |Yes, it was the electric shocks |
GoToChoice omg_yes describe_milgram_1.
Effects omg_yes: [set Thread = milgram]
Conditions omg_yes: [Not [Member milgram ClosedThreads]]
Reusable omg_yes e0001.
CharacterTag omg_yes ned expression neutral.
CharacterTag omg_yes brad expression happy.

Content describe_milgram_1: |"Yes Brad, you're right. The Milgram experiment was an obedience study to examine people's willingness to obey an authority figure." |
Speaker describe_milgram_1 ned.
ChoiceLabel describe_milgram_1: |Continue |
GoToChoice describe_milgram_1 milgram_explain.
ChoiceCondition describe_milgram_1 describe_milgram_1_c: [AvailableCheckpoint milgram]
ChoiceCondition describe_milgram_1 describe_milgram_1_cc: [AvailableCheckpoint milgram]
Effects describe_milgram_1: [set Thread = milgram]
Conditions describe_milgram_1: [Not [Member milgram ClosedThreads]]
Reusable describe_milgram_1 e0001.
CharacterTag describe_milgram_1 ned expression neutral.
CharacterTag describe_milgram_1 brad expression happy.

Content describe_milgram_2: |"No, Brad," Ned says "You're thinking of the Standford prison experiment. Though they are both studies about authority figures, The Milgram experiment was focused on the willingness of participants to obey an authority figure." |
Speaker describe_milgram_2 ned.
ChoiceLabel describe_milgram_2: |Continue |
GoToChoice describe_milgram_2 milgram_cringe.
GoToChoice describe_milgram_2 brad_why.
ChoiceCondition describe_milgram_2 describe_milgram_2_c: [AvailableCheckpoint milgram]
ChoiceCondition describe_milgram_2 describe_milgram_2_cc: [AvailableCheckpoint milgram]
ChoiceCondition describe_milgram_2 describe_milgram_2_ccc: [AvailableCheckpoint milgram]
Effects describe_milgram_2: [set Thread = milgram]
Conditions describe_milgram_2: [Not [Member milgram ClosedThreads]]
Reusable describe_milgram_2 e0001.
CharacterTag describe_milgram_2 ned expression neutral.
CharacterTag describe_milgram_2 brad expression nervous.

Content milgram_cringe: |Brad cringes, he should have known that. He just watched a documentary about this! |
Speaker milgram_cringe brad.
ChoiceLabel milgram_cringe: |Cringe at mistake |
GoToChoice milgram_cringe brad_why.
ChoiceCondition milgram_cringe milgram_cringe_c: [AvailableCheckpoint milgram]
ChoiceCondition milgram_cringe milgram_cringe_cc: [AvailableCheckpoint milgram]
ChoiceCondition milgram_cringe milgram_cringe_ccc: [AvailableCheckpoint milgram]
Effects milgram_cringe: [set Thread = milgram]
Conditions milgram_cringe: [Not [Member milgram ClosedThreads]]
Reusable milgram_cringe e0001.
CharacterTag milgram_cringe ned expression neutral.
CharacterTag milgram_cringe brad expression sad.

Content brad_why: |"Well that sounds kinda mad scientist-y, what went wrong?" |
Speaker brad_why brad.
ChoiceLabel brad_why: |Ask for explination |
GoToChoice brad_why milgram_explain.
ChoiceCondition brad_why brad_why_c: [AvailableCheckpoint milgram]
ChoiceCondition brad_why brad_why_cc: [AvailableCheckpoint milgram]
ChoiceCondition brad_why brad_why_ccc: [AvailableCheckpoint milgram]
Effects brad_why: [set Thread = milgram]
Conditions brad_why: [Not [Member milgram ClosedThreads]]
Reusable brad_why e0001.
CharacterTag brad_why ned expression neutral.
CharacterTag brad_why brad expression neutral.

Content milgram_explain: |"The participants weren't told the truth about the experiment's intentions and they believed they were harming another person. Even after explicitly saying they no longer wanted to participate, they were not allowed to stop the examination. This caused participants to be put under severe emotional distress. If the IRB had existed back then, this would have been a violation of their guidelines and could have been prevented." |
Speaker milgram_explain ned.
ChoiceLabel milgram_explain: |Wait for Ned's explanation |
ChoiceCondition milgram_explain milgram_explain_c: [AvailableCheckpoint milgram]
ChoiceCondition milgram_explain milgram_explain_cc: [AvailableCheckpoint milgram]
ChoiceCondition milgram_explain milgram_explain_ccc: [AvailableCheckpoint milgram]
Effects milgram_explain: 
	[set Thread = milgram]
	[add milgram Learnings]
	[OpenResolution]
	[CloseAllCheckpoints milgram]
[end]
Conditions milgram_explain: [Not [Member milgram ClosedThreads]]
Reusable milgram_explain e0001.
CharacterTag milgram_explain ned expression neutral.
CharacterTag milgram_explain brad expression neutral.

Content vulnerable_intro: |"You mentioned vulnerable subjects. That sounds like a term with a very specific definition," Brad prompts. |
Speaker vulnerable_intro brad.
ChoiceLabel vulnerable_intro: |Ask about vulnerable subjects |
GoToChoice vulnerable_intro ned_vulnerable_intro.
Effects vulnerable_intro: 
	[set Thread = vulnerable]
	[add vulnerable_intro Learnings]
[end]
Conditions vulnerable_intro: 
	[set Thread = vulnerable]
	[Member vulnerable_mentioned Learnings]
	[Not [Member vulnerable ClosedThreads]]
[end]
Reusable vulnerable_intro e0001.
CharacterTag vulnerable_intro ned expression neutral.
CharacterTag vulnerable_intro brad expression neutral.

Content ned_vulnerable_intro: |"IRBs have a federal requirement to protect particularly vulverable populations. That includes those who may not be able to make informed decisions for themselves. People who can't fully consent, as well as populations that are simply convienent and readily available." |
Speaker ned_vulnerable_intro ned.
ChoiceLabel ned_vulnerable_intro: |Listen to Ned's explanation |
GoToChoice ned_vulnerable_intro vulnerable_specific.
GoToChoice ned_vulnerable_intro full_consent.
GoToChoice ned_vulnerable_intro what_is_consent.
ChoiceCondition ned_vulnerable_intro ned_vulnerable_intro_c: [AvailableCheckpoint vulnerable]
ChoiceCondition ned_vulnerable_intro ned_vulnerable_intro_cc: [AvailableCheckpoint vulnerable]
ChoiceCondition ned_vulnerable_intro ned_vulnerable_intro_ccc: [AvailableCheckpoint vulnerable]
Effects ned_vulnerable_intro: 
	[set Thread = vulnerable]
	[OpenCheckpoint vulnerable full_consent]
[end]
Conditions ned_vulnerable_intro: [Not [Member vulnerable ClosedThreads]]
CharacterTag ned_vulnerable_intro ned expression confident.
CharacterTag ned_vulnerable_intro brad expression neutral.

Content vulnerable_specific: |Ned responds. "These are pregnant woman, prisoners, individuals with mental disabilities, and others. It also includes the socially disadvantaged, racial and ethnic minorities, and children. I hope that makes sense." |
Speaker vulnerable_specific ned.
ChoiceLabel vulnerable_specific: |Ask "Which populations?" |
GoToChoice vulnerable_specific full_consent.
ChoiceCondition vulnerable_specific vulnerable_specific_c: [AvailableCheckpoint vulnerable]
ChoiceCondition vulnerable_specific vulnerable_specific_cc: [AvailableCheckpoint vulnerable]
ChoiceCondition vulnerable_specific vulnerable_specific_ccc: [AvailableCheckpoint vulnerable]
Effects vulnerable_specific: [set Thread = vulnerable]
Conditions vulnerable_specific: [Not [Member vulnerable ClosedThreads]]
CharacterTag vulnerable_specific ned expression confident.
CharacterTag vulnerable_specific brad expression confident.

Content full_consent: |"Full informed consent is when we ensure full comprehension of the nature of research and the subject's participation. We give them a clear, voluntary choice to participate in the study and tell them they can back out at any time. We should present it at the 8th grade reading level." Ned pauses and continues with emphasis, "and some groups, like children, cannot fully consent." |
Speaker full_consent ned.
ChoiceLabel full_consent: |Ask about full consent |
GoToChoice full_consent what_is_consent.
GoToChoice full_consent end_vulnerable_bad.
GoToChoice full_consent end_vulnerable_good.
Effects full_consent: [set Thread = vulnerable]
Conditions full_consent: [Not [Member vulnerable ClosedThreads]]
Reusable full_consent e0001.
CharacterTag full_consent ned expression confident.
CharacterTag full_consent brad expression neutral.

Content what_is_consent: |"Okay, but how do we actually provide consent?" asks Brad. |
Speaker what_is_consent brad.
ChoiceLabel what_is_consent: |Ask how to provide full consent |
GoToChoice what_is_consent consent_definition.
Effects what_is_consent: [set Thread = vulnerable]
Conditions what_is_consent: [Not [Member vulnerable ClosedThreads]]
Reusable what_is_consent e0001.
CharacterTag what_is_consent ned expression neutral.
CharacterTag what_is_consent brad expression confused.

Content consent_definition: |"There are a bunch of facets to that question, Brad," says Ned. He seems like he's enjoying this now. "The main things you need to remember are that you need to provide a clear statement of the research, its intents, benefits, and disclosure of procedures or provided treatments. You can look up the rest, but you usually need to get written consent." |
Speaker consent_definition ned.
ChoiceLabel consent_definition: |Continue |
GoToChoice consent_definition end_vulnerable_bad.
GoToChoice consent_definition end_vulnerable_good.
GoToChoice consent_definition full_consent.
Effects consent_definition: [set Thread = vulnerable][add consent_def Learnings]
Conditions consent_definition: [Not [Member vulnerable ClosedThreads]]
Reusable consent_definition e0001.
CharacterTag consent_definition ned expression happy.
CharacterTag consent_definition brad expression confused.

Content end_vulnerable_bad: 
	|"Well, I did ask the parents if I could interview their kids," Brad says sheepishly. |<br><br>
	|Ned looks at him with a nonbelieving stare. |
[end]
Speaker end_vulnerable_bad brad.
ChoiceLabel end_vulnerable_bad: |Clarify parental consent |
ChoiceCondition end_vulnerable_bad end_vulnerable_bad_c: [AvailableCheckpoint vulnerable]
ChoiceCondition end_vulnerable_bad end_vulnerable_bad_cc: [AvailableCheckpoint vulnerable]
ChoiceCondition end_vulnerable_bad end_vulnerable_bad_ccc: [AvailableCheckpoint vulnerable]
Effects end_vulnerable_bad: 
	[set Thread = vulnerable]
	[add vulnerable Learnings]
	[OpenResolution] 
	[CloseAllCheckpoints vulnerable]
[end]
Conditions end_vulnerable_bad: [BradAdmittedStudy e0001][Member consent_def Learnings]
Reusable end_vulnerable_bad e0001.
CharacterTag end_vulnerable_bad ned expression neutral.
CharacterTag end_vulnerable_bad brad expression nervous.

Content end_vulnerable_good: 
	|"Okay I think I understand this a lot better now, Ned. Do I have your consent to change the subject?" |<br><br>
	|Brad awkwardly laughs to himself in the quiet office. |<br><br>
	|"Nevermind," he says. |
[end]
Speaker end_vulnerable_good brad.
ChoiceLabel end_vulnerable_good: |Joke about getting Ned's consent |
ChoiceCondition end_vulnerable_good end_vulnerable_good_c: [AvailableCheckpoint vulnerable]
ChoiceCondition end_vulnerable_good end_vulnerable_good_cc: [AvailableCheckpoint vulnerable]
ChoiceCondition end_vulnerable_good end_vulnerable_good_ccc: [AvailableCheckpoint vulnerable]
Effects end_vulnerable_good: 
	[set Thread = vulnerable]
	[add vulnerable Learnings]
	[OpenResolution] 
	[CloseAllCheckpoints vulnerable]
[end]
Conditions end_vulnerable_good: [Member consent_def Learnings]
Reusable end_vulnerable_good e0001.
CharacterTag end_vulnerable_good ned expression sad.
CharacterTag end_vulnerable_good brad expression nervous.

Content stanford_intro: |“Oh, so like the Stanford prison experiment, right?” Brad suggests. |
Speaker stanford_intro brad.
ChoiceLabel stanford_intro: |Like the Stanford prison experiment? |
GoToChoice stanford_intro stanford_misleading.
Effects stanford_intro: 
	[add stanford_intro Learnings]
	[set Thread = stanford]
[end]
Conditions stanford_intro: [Member stanford_mentioned Learnings][Not [Member stanford ClosedThreads]]
CharacterTag stanford_intro ned expression neutral.
CharacterTag stanford_intro brad expression happy.

Content stanford_misleading: 
	|Ned sighs. |<br><br>
	|“Well, yes, but also no. The Stanford prison experiment was a violation of IRB standards, just not in the way most people think it was.” |
[end]
Speaker stanford_misleading ned.
ChoiceLabel stanford_misleading: |Continue |
GoToChoice stanford_misleading stanford_really.
GoToChoice stanford_misleading uninformed_2.
ChoiceCondition stanford_misleading stanford_misleading_c: [AvailableCheckpoint stanford]
ChoiceCondition stanford_misleading stanford_misleading_cc: [AvailableCheckpoint stanford]
ChoiceCondition stanford_misleading stanford_misleading_ccc: [AvailableCheckpoint stanford]
Effects stanford_misleading: [set Thread = stanford]
Conditions stanford_misleading: [Not [Member stanford ClosedThreads]]
CharacterTag stanford_misleading ned expression neutral.
CharacterTag stanford_misleading brad expression neutral.

Content stanford_really: |“Wait, really?” Brad crosses his arms. “Then what was it about the experiment that violated IRB standards?” |
Speaker stanford_really brad.
ChoiceLabel stanford_really: |Wait, really? |
GoToChoice stanford_really informed_uninformed.
Effects stanford_really: [set Thread = stanford]
Conditions stanford_really: [Not [Member stanford ClosedThreads]]
Reusable stanford_really e0001.
CharacterTag stanford_really ned expression neutral.
CharacterTag stanford_really brad expression confused.

Content informed_uninformed: |“Well, you know that informed consent and autonomy of the participants is important,” Ned says, leaning back in his chair as he speaks, “Especially since uninformed consent opens the door to human rights abuses very easily.” |
Speaker informed_uninformed ned.
ChoiceLabel informed_uninformed: |Continue |
GoToChoice informed_uninformed uninformed_1.
ChoiceCondition informed_uninformed informed_uninformed_c: [AvailableCheckpoint stanford]
ChoiceCondition informed_uninformed informed_uninformed_cc: [AvailableCheckpoint stanford]
ChoiceCondition informed_uninformed informed_uninformed_ccc: [AvailableCheckpoint stanford]
Effects informed_uninformed: [set Thread = stanford]
Conditions informed_uninformed: [Not [Member stanford ClosedThreads]]
Reusable informed_uninformed e0001.
CharacterTag informed_uninformed ned expression neutral.
CharacterTag informed_uninformed brad expression confused.

Content uninformed_1: 
	|Brad nods. |<br><br>
	|“Right, that makes sense. So the Stanford prison experiment wasn’t informed consent?” |
[end]
Speaker uninformed_1 brad.
ChoiceLabel uninformed_1: |The participants were uninformed, right? |
GoToChoice uninformed_1 was_informed.
Effects uninformed_1: [set Thread = stanford]
Conditions uninformed_1: [Not [Member stanford ClosedThreads]]
Reusable uninformed_1 e0001.
CharacterTag uninformed_1 ned expression neutral.
CharacterTag uninformed_1 brad expression confident.

Content uninformed_2: |“It's because the participants were kept in unsanitary conditions and weren't informed about the nature of the study, right?” |
Speaker uninformed_2 brad.
ChoiceLabel uninformed_2: |The participants were uninformed, right? |
GoToChoice uninformed_2 was_informed.
Effects uninformed_2: [set Thread = stanford]
Conditions uninformed_2: [Not [Member stanford ClosedThreads]]
Reusable uninformed_2 e0001.
CharacterTag uninformed_2 ned expression neutral.
CharacterTag uninformed_2 brad expression confident.

Content was_informed: 
	|Ned shrugs. |<br><br>
	|“No… the thing is, the Stanford prison experiment <i>was</i> informed consent.” |
[end]
Speaker was_informed ned.
ChoiceLabel was_informed: |Continue |
GoToChoice was_informed what_was_wrong.
ChoiceCondition was_informed was_informed_c: [AvailableCheckpoint stanford]
ChoiceCondition was_informed was_informed_cc: [AvailableCheckpoint stanford]
ChoiceCondition was_informed was_informed_ccc: [AvailableCheckpoint stanford]
Effects was_informed: [set Thread = stanford]
Conditions was_informed: [Not [Member stanford ClosedThreads]]
Reusable was_informed e0001.
CharacterTag was_informed ned expression neutral.
CharacterTag was_informed brad expression neutral.

Content what_was_wrong: |“It was? So then, if it the experiment had informed consent, then how come it was so bad?” |
Speaker what_was_wrong brad.
ChoiceLabel what_was_wrong: |Then what was wrong? |
GoToChoice what_was_wrong expectations.
Effects what_was_wrong: [set Thread = stanford]
Conditions what_was_wrong: [Not [Member stanford ClosedThreads]]
Reusable what_was_wrong e0001.
CharacterTag what_was_wrong ned expression neutral.
CharacterTag what_was_wrong brad expression confused.

Content expectations: |“The problem was the way the researchers acted. Their expectations had a huge impact on the way the experiment panned out,” Ned purses his lips disapprovingly. |
Speaker expectations ned.
ChoiceLabel expectations: |Continue |
GoToChoice expectations researchers_involved.
GoToChoice expectations how_bias_tho.
ChoiceCondition expectations expectations_c: [AvailableCheckpoint stanford]
ChoiceCondition expectations expectations_cc: [AvailableCheckpoint stanford]
ChoiceCondition expectations expectations_ccc: [AvailableCheckpoint stanford]
Effects expectations: [set Thread = stanford]
Conditions expectations: [Not [Member stanford ClosedThreads]]
Reusable expectations e0001.
CharacterTag expectations ned expression disapproving.
CharacterTag expectations brad expression sad.

Content researchers_involved: |“But don’t the researchers have to be closely involved?” Brad scratches his head. “What went wrong?” |
Speaker researchers_involved brad.
ChoiceLabel researchers_involved: |Don’t they have to be involved? |
GoToChoice researchers_involved spiral.
Effects researchers_involved: [set Thread = stanford]
Conditions researchers_involved: [Not [Member stanford ClosedThreads]]
Reusable researchers_involved e0001.
CharacterTag researchers_involved ned expression neutral.
CharacterTag researchers_involved brad expression confused.

Content spiral: |“They were involved with the experiment in a way that caused their expectations to influence the experiment, and that in turn caused it to spiral out of control,” Ned shakes his head. |
Speaker spiral ned.
ChoiceLabel spiral: |Continue |
GoToChoice spiral advertisement.
Effects spiral: [set Thread = stanford]
Conditions spiral: [Not [Member stanford ClosedThreads]]
Reusable spiral e0001.
CharacterTag spiral ned expression disapproving.
CharacterTag spiral brad expression confused.

Content advertisement: |“That, and the way the advertisement that recruited for the experiment was worded influenced the kinds of people that volunteered for the experiment.” |
Speaker advertisement ned.
ChoiceLabel advertisement: |Continue |
GoToChoice advertisement how_bias_tho.
ChoiceCondition advertisement advertisement_c: [AvailableCheckpoint stanford]
ChoiceCondition advertisement advertisement_cc: [AvailableCheckpoint stanford]
ChoiceCondition advertisement advertisement_ccc: [AvailableCheckpoint stanford]
Effects advertisement: [set Thread = stanford]
Conditions advertisement: [Not [Member stanford ClosedThreads]]
Reusable advertisement e0001.
CharacterTag advertisement ned expression disapproving.
CharacterTag advertisement brad expression nervous.

Content how_bias_tho: |“But as the researchers running the study, we have to be pretty closely involved in the experiments, right? So then, how are we supposed to stop our biases from influencing our work?” |
Speaker how_bias_tho brad.
ChoiceLabel how_bias_tho: |How do we avoid influencing studies with our biases? |
GoToChoice how_bias_tho stanford_end.
Effects how_bias_tho: [set Thread = stanford]
Conditions how_bias_tho: [Not [Member stanford ClosedThreads]]
Reusable how_bias_tho e0001.
CharacterTag how_bias_tho ned expression neutral.
CharacterTag how_bias_tho brad expression nervous.

Content stanford_end: |“Well, there’s a few ways we can mitigate influencing studies with our expectations. We can choose unobtrusive measures, like anonymous surveys, and do our best to base our evaluations on objective evidence and criteria.” |
Speaker stanford_end ned.
ChoiceLabel stanford_end: |Continue |
ChoiceCondition stanford_end stanford_end_c: [AvailableCheckpoint stanford]
ChoiceCondition stanford_end stanford_end_cc: [AvailableCheckpoint stanford]
ChoiceCondition stanford_end stanford_end_ccc: [AvailableCheckpoint stanford]
Effects stanford_end: 
	[set Thread = stanford]
	[add stanford Learnings]
	[OpenResolution]
	[CloseAllCheckpoints stanford]
[end]
Conditions stanford_end: [Not [Member stanford ClosedThreads]]
Reusable stanford_end e0001.
CharacterTag stanford_end ned expression neutral.
CharacterTag stanford_end brad expression neutral.



# Declare the StorySpec
[randomly]

Want e0001 resolution.
Want e0001 entry.
Want e0001 entry_2.
Want e0001 justice.
Want e0001 beneficence.
Want e0001 irb.
Want e0001 end.
Want e0001 insecurity.
Want e0001 justice.
Want e0001 beneficence.
Want e0001 justice.
Want e0001 irb.
Want e0001 pedagogy_1.
Want e0001 pedagogy_2.
Want e0001 pedagogy_3.
Want e0001 pedagogy_4.
Want e0001 pedagogy_5.
Want e0001 pedagogy_6.
Want e0001 pedagogy_7.
Want e0001 pedagogy_8.
Want e0001 pedagogy_9.
Want e0001 pedagogy_10.
Want e0001 pedagogy_11.
Want e0001 pedagogy_12.
Want e0001 pedagogy_13.
Want e0001 pedagogy_14.
Want e0001 pedagogy_15.
Want e0001 pedagogy_16.


[randomly]
Fulfilled resolution: [Expanded resolution_intro CurrentScene]
Fulfilled entry: [Expanded entry CurrentScene]
Fulfilled justice: [Expanded justice_intro CurrentScene]
Fulfilled beneficence: [Expanded beneficence_intro CurrentScene]
Fulfilled irb: [Expanded irb_intro CurrentScene]
Fulfilled entry: [Expanded outside CurrentScene]
Fulfilled entry_2: [Expanded remind CurrentScene]
Fulfilled end: [Expanded end CurrentScene]
Fulfilled insecurity: [Expanded t_start_fix CurrentScene]
Fulfilled pedagogy_1: [Length Learnings ?l] [> ?l 1] # Eventually we want the score to be able to check *how close* to the goal we are
Fulfilled pedagogy_2: [Length Learnings ?l] [> ?l 2]
Fulfilled pedagogy_3: [Length Learnings ?l] [> ?l 3]
Fulfilled pedagogy_4: [Length Learnings ?l] [> ?l 4]
Fulfilled pedagogy_5: [Length Learnings ?l] [> ?l 5]
Fulfilled pedagogy_6: [Length Learnings ?l] [> ?l 6]
Fulfilled pedagogy_7: [Length Learnings ?l] [> ?l 7]
Fulfilled pedagogy_8: [Length Learnings ?l] [> ?l 8]
Fulfilled pedagogy_9: [Length Learnings ?l] [> ?l 9]
Fulfilled pedagogy_10: [Length Learnings ?l] [> ?l 10]
Fulfilled pedagogy_11: [Length Learnings ?l] [> ?l 11]
Fulfilled pedagogy_12: [Length Learnings ?l] [> ?l 12]
Fulfilled pedagogy_13: [Length Learnings ?l] [> ?l 13]
Fulfilled pedagogy_14: [Length Learnings ?l] [> ?l 14]
Fulfilled pedagogy_15: [Length Learnings ?l] [> ?l 15]
Fulfilled pedagogy_16: [Length Learnings ?l] [> ?l 16]
