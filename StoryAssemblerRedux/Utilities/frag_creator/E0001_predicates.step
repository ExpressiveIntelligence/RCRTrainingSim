fluent BradAdmittedStudy ?scene.
fluent PleasantriesOver ?scene.
[function]
fluent Check ?thread ?frag.

# Define the initial state as required by StoryAssembler
InitialSceneState e0001: 
    [Not [PleasantriesOver e0001]]
    [set BradInsecurityToNed = 0]
    [set Thread = none]
    [set Learnings = empty]
    [set ClosedThreads = empty]
    [now [Not [BradAdmittedStudy e0001]]]
[end]

# Scene specific tasks
[predicate]
BradLearned: [Member justice Learnings] [Member beneficence Learnings] [Member vulnerable Learnings]
# TODO vulnerable should be switched to [Member respect Learnings] when its done

OpenThreads:
    [UnlockPrinciples]
    [UnlockExtra]
[end]

UnlockPrinciples:
    [OpenCheckpoint beneficence beneficence_intro]
    [OpenCheckpoint respect respect_intro]
    [OpenCheckpoint justice justice_intro]
[end]

UnlockExtra:
    [OpenCheckpoint vulnerable vulnerable_intro]
    [OpenCheckpoint stanford stanford_intro]
    [OpenCheckpoint milgram you_remember]
[end]

MentionAllExtra:
    [add milgram_mentioned Learnings]
    [add vulnerable_mentioned Learnings]
    [add stanford_mentioned Learnings]
[end]


DoMentionOfExtraThread: For instance, we could talk about [MentionUnmentioned].
DoMentionOfExtraThread.

[predicate]
MentionUnmentioned: [MentionMilgram]
MentionUnmentioned: [MentionStanford]
MentionUnmentioned: [MentionVulnerable]
MentionUnmentioned: [MentionJustice]
MentionUnmentioned: [MentionBeneficence]

[predicate]
MentionMilgram:
    [Not [Member milgram ClosedThreads]]
    [add milgram_mentioned Learnings]
    the Milgram syphilis study
[end]

[predicate]
MentionStanford:
    [Not [Member stanford ClosedThreads]]
    [add stanford_mentioned Learnings]
    the Stanford prison experiment
[end]

[predicate]
MentionVulnerable:
    [Not [Member vulnerable ClosedThreads]]
    [add vulnerable_mentioned Learnings]
    the concept of vulnerable populations
[end]

[predicate]
MentionJustice:
    [Not [Member justice ClosedThreads]]
    [add justice_mentioned Learnings]
    what the IRB calls Justice
[end]

[predicate]
MentionBeneficence:
    [Not [Member beneficence ClosedThreads]]
    [add beneficence_mentioned Learnings]
    beneficence
[end]

# Open the final thread
# gets called at the end of each Extra Thread (so you have to visit at least one)
OpenResolution: 
    [OpenCheckpoint resolution resolution_intro]
    [DoMentionOfExtraThread] # Open another unopened thread if there is one
[end]