# Must declare the scene for various checks to succeed
Scene test.

[randomly]
Fragment disastrous_date test.
Fragment on_the_path test.
Fragment not_on_the_path test.
Fragment hard test.
Fragment bad test.

fluent Married ? ?.

InitialSceneState test:
    [set ^Initialized = true]
    [now [Not [Dating ally protagonist]]]
[end]

Content disastrous_date: "a very bad date"
Conditions disastrous_date.
Effects disastrous_date. # no effects
Speaker disastrous_date ?speaker: [= ?speaker "ally"]
ChoiceLabel disastrous_date: "a choicy label"

Content on_the_path: "Start dating"
Effects on_the_path:
    [now [Dating ally protagonist]]
[end]
Conditions on_the_path.

Content not_on_the_path: "another one"
Effects not_on_the_path:
    [now [Dating someone_else another_person]]
[end]
Conditions not_on_the_path.

Content hard: "I do"
Effects hard:
    [now [Married ally protagonist]]
[end]
Conditions hard:
    [Dating ally protagonist]
[end]

Content bad: "bad"
Effects bad.

[randomly]
Want test initialized.
Want test characters_dating.
# Want test goal_true.
# [ [Want Test initialized] [Want test characters_dating] ].

EffectMakesWantTrue 
# might want to count how many are true and then purposely fail

[randomly]
Fulfilled initialized:
    [= ^Initialized true]
[end]
Fulfilled characters_dating: 
    [Dating ally protagonist]
[end]
# Fulfilled goal_true: 
#     [= ^Goal true]
# [end]

# Another scene
# ... with an incomplete storyspec
Scene incomplete_scene.
InitialSceneState incomplete_scene:
    [set Initialized = false]
[end]

[randomly]
Want incomplete_scene initialized.
Fulfilled initialized:
    [= ^Initialized true]
[end]








# Old reference code

# [randomly]
# Want intro_mechanics test.
# # Want establish_specialty_info.
# # Want establish_setting.
# # Want establish_ally_backstory.
# # Want establish_protag_regrets.
# # Want establish_protag_backstory.
# # Want provoke_confidence_choice.
# # Want ally_reassures_protag.
# # Want dropped_knowledge.

# Fulfilled intro_mechanics: 
#     [= ^IntroMechanics true]
# [end]
# # Fulfilled establish_specialty_info: 
# #     [= ^EstablishSpecialtyInfo true]
# # [end]
# # Fulfilled establish_setting: 
# #     [= ^EstablishSetting true]
# # [end]
# # Fulfilled establish_ally_backstory: 
# #     [= ^EstablishAllyBackstory true]
# # [end]
# # Fulfilled establish_protag_regrets: 
# #     [= ^EstablishProtagRegrets true]
# # [end]
# # Fulfilled establish_protag_backstory: 
# #     [= ^EstablishProtagBackstory true]
# # [end]
# # Fulfilled provoke_confidence_choice: 
# #     [= ^ProvokeConfidenceChoice true]
# # [end]
# # Fulfilled ally_reassures_protag: 
# #     [= ^AllyReassuresProtag true]
# # [end]
# # Fulfilled dropped_knowledge: 
# #     [>= ^DroppedKnowledge 2]
# # [end]