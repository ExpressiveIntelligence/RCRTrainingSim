# Test the transpiled dinner scene.
TestDinner:
    [Initialize final_dinner]
    Testing ^CurrentScene
    [AllPathsFrom root ?paths]
    ?paths
[end]

TestRanking:
    [Initialize test]
    [AllPathsFrom root ?paths]
    [ForEach [Member ?path ?paths] [Paragraph] [Write ?path]]
[end]

TestFindPaths:
    [Initialize test]
    [FindPaths [root false] empty ?paths]
    ?paths
[end]

TestBestChoices:
    [Initialize test]
    [BestChoices root ?choices]
    Best Choices: ?choices
[end]

TestAllGoToChoices:
    [Initialize test]
    Empty: [AllGoToChoices root ?goto_frags] ?goto_frags
    # TODO
[end]

TestAllPathsFrom:
    [Initialize test]
    [AllPathsFrom root ?paths] 
    ?paths
    # TODO
[end]

TestBestConditionalChoices:
    [Initialize test]
    [AllPathsFrom root ?paths] 
    [BestConditionalChoices ?frag ?paths ?choice_spec_frags]
    Empty: ?choice_spec_frags

    # TODO
[end]

TestTopLevelChoicesIfNoOtherOption:
    [Initialize test]
    [AllPathsFrom root ?paths] 
    [TopLevelChoicesIfNoOtherOption empty ?top_level]
    ?top_level

    # TODO
[end]

TestCat:
    [Cat empty empty ?empty]
    Empty ?empty
    [set ^A = empty]
    [add 1 ^A]
    [add 2 ^A]
    [Br]
    [Cat ^A empty ?a]
    ^A ?a
    [Br]
    [Cat ^A ^A ?b]
    ^A x2 ?b
[end]

# Sanity check that NotAny behaves as expected.
[predicate]
Nope ?x: [Number ?x] [Fail]
TestNotAny ?f:
    [Not [Nope ?x]]
[end]

TestAvailableNextFragment:
    [Initialize test]
    
    [AvailableNextFragment root [?b ?n1]]
    root ?b ?n1
    [Visit ?b] [Paragraph]
    [AvailableNextFragment ?b [?c ?n2]]
    ?b ?c ?n2
    [Visit ?c]
    # [AvailableNextFragment ?c ?d]
    # ?c ?d
[end]

TestAllSatisfiableChoices:
    [Initialize test]
    [DoAll [AllSatisfiableChoices ?frag ?list] [Write ?frag][Write ?list]]
[end]

TestForEachAvailable:
    [Initialize test]
    [Visit disastrous_date]
    [Visit apology]
    [Visit unapologetic]
    [Visit respite]
    [FindUnique ?frag [SelectAvailableFragment disastrous_date ?frag] ?all_children]
    [ForEach [Member ?cur_frag ?all_children] [Write ?cur_frag]]
    # [ForEach [SelectAvailableFragment ?cur_frag ?frag] [Write ?frag]]
[end]

TestExpanded:
    [Initialize test]
    [AllAvailableTopLevelChoices ?f]
    [Length ?f ?len] Length: ?len/Write
    ?f/Write
    [Member ?x ?f][Visit ?x]
    [AllAvailableTopLevelChoices ?f2]
    [Length ?f2 ?len2] Length: ?len2/Write
    ?f2/Write
[end]

TestBestTopLevelFrag:
    [Initialize test]
    [AllAvailableTopLevelChoices ?f] [TopFrag ?f ?frag ?score]
    Best Top Level Fragment: ?frag ?score
[end]
TestBestTopLevelFrag:
    Best Top Level Fragment: FAIL
[end]
TestBestSatisfiableFrag:
    [Initialize test]
    [AllSatisfiableChoices ?source ?fs] [TopFrag ?fs ?frag ?score]
    Best Choice Spec Fragment: ?frag ?score
[end]
TestBestSatisfiableFrag:
    Best Choice Spec Fragment: FAIL
[end]
TestBestGoToFrag:
    [Initialize test]
    [AllGoToChoices ?source ?fs] [TopFrag ?fs ?frag ?score]
    Best Choice Spec Fragment: ?frag ?score
[end]
TestBestGoToFrag:
    Best Choice Spec Fragment: FAIL
[end]

TestWantConditions:
    [Initialize test]
    [= ?want some_respite]
    [EffectMakesWantTrue ?frag ?want] 
    ?frag/Write ?want
[end]

Y:
    [X root false empty ?x]
    ?x
[end]

X ?frag ?choice_id ?path ?paths_from_children:
    [Initialize test]

    [case ?frag] [Different root] : [Visit ?frag] [else]  [end]
    # All possible next fragments that can be selected are 'children' of the current fragment. Should backtrack all calls.
    [FindUnique ?next_choice [AvailableNextFragment ?frag ?next_choice] ?potential_choices]
    [FindAll ?paths_from_child [FindAllPathsFromAChildOf ?potential_choices [?frag ?choice_id] ?path ?paths_from_child] ?list_of_paths_from_children]
    [Flatten2D ?list_of_paths_from_children ?paths_from_children]
[end]

TestBestCInternals:
    [Initialize test]
    [AllGoToChoices ?frag ?goto_frags]
    [AllPathsFrom ?frag ?paths]
    [BestConditionalChoices ?frag ?paths ?choice_spec_frags]
    # [BestChoices root ?paths]
    ?paths [Paragraph]
    [Cat ?goto_frags ?choice_spec_frags ?running_choices]
    Running: ?running_choices
    [TopLevelChoicesIfNoOtherOption ?running_choices ?top_level_frags]
    [Length ?running_choices ?l] Length: ?l
    Top Level: ?top_level_frags
    [Cat ?running_choices ?top_level_frags ?choices]
    ?choices
[end]


TestBestChoices:
    [Initialize test]
    [BestChoices root ?choices]
    ?choices
[end]

TestNextStepFulfillsChoice:
    [Initialize test]
    [BestChoices root ?paths]
    [Member ?path ?paths]
    [NextStepFulfillsChoice ?choice ?path ?target_frag]
     ?paths [Paragraph]
    ?choice ?path ?target_frag
[end]

# Test that the custom Backtack function works as expected.
TestBacktrack:
    [set ^A = good]
    [Backtrack [SetA bad] ?result]
    Backtrack result: ?result [Paragraph]
    A: ^A
[end]

SetA ?arg ?result:
    [set ^A = bad]
    [= ?result result]
    Shouldn't see this: ?arg
[end]

# Test Utils.SetUnion
TestSetUnion:
    [set A = empty]
    [set B = empty]
    [add 1 A]
    [add 2 A]
    [add 3 A]
    [add 1 B]
    [add 4 B]
    [add 5 B]
    ^A ^B
    [SetUnion ^A ^B ?c]
    Result ?c
[end]

