I:
    [Initialize ?scene]
    Scene: ?scene
[end]

Initialize ?scene:
    [verbatimCase]
    [InitializeSceneGlobals ?scene]
    [ResetScene ?scene]
    [InitializeChoices]
    [Warnings ?scene]
[end]

InitializeSceneGlobals ?scene:
    [set CurrentFragment = root]
    [Scene ?scene]
    [set CurrentScene = ?scene]
    [InitScene CurrentScene] # Calls the scene's init task
[end]

ResetScene ?scene: [ForEach [Fragment ?frag ?scene] [Unvisit ?frag ?scene]]

InitializeChoices:
    [BestChoices CurrentFragment ?next_best]
    [set NextBestChoices = ?next_best]
[end]

PrintChoices:
    [DoAll [Member ?choice NextBestChoices] [WriteVerbatim ?choice]]
[end]

BestPath:
    # TODO render the best path, which should be saved somewhere
[end]

ShowHelp:
    Command Line Interface: [Paragraph]
    Press "s" to save state between executions.

    Commands: [Paragraph]

    \[Initialize\ \?scene\] [Paragraph] Must be called before any other |StoryAssembler.step| task. Sets up the |?scene| and sets the current fragment to an empty root. Note: it's fine to call this task with an unbound |?scene|. Example: \[Initialize maze\] \[Render\] [Paragraph]
    |[Render] [Paragraph] Render the current fragment and scene content, and display choices. [Paragraph]|
    |[MakeChoice \?\choice_id]| [Paragraph] Specify the choice to make, based on the choice id, which will not be shown to the end user.  [Paragraph]
    |[PrintChoices]| [Paragraph] Print the choices available. [Paragraph]
[end]

C ?choice_id: # Used for the CLI only
    [MakeChoice ?choice_id]
    [Show] # Render the result for humans
[end]

# The mechanism for the user to select a fragment
MakeChoice ?choice_label:
    [Var ?choice_label]
    [Throw |MakeChoice needs a bound variable:| ?choice_label]
[end]
MakeChoice ?choice_label:
    [GoToChoice CurrentFragment ?choice_label]
    [Fragment ?choice_label CurrentScene]
    [Not [TestConditions ?choice_label]]
    [Throw Conditions not met for ?choice_label]
[end]
MakeChoice ?choice_label:
    [GoToChoice CurrentFragment ?choice_label]
    [Fragment ?choice_label CurrentScene]
    [UpdateCurrentFragment ?choice_label]
[end]
MakeChoice ?choice_label:
    [GetFromNextBestChoices ?fragment_id ?choice_label]
    [UpdateCurrentFragment ?fragment_id]
[end]
MakeChoice ?choice_label:
    [AvailableTopLevelFragment ?choice_label] # TODO I think this logic needs to be thought through
    [GetFromNextBestChoices ?choice_label direct]
    [UpdateCurrentFragment ?choice_label]
[end]

UpdateCurrentFragment ?fragment_id:
    [Request ?fragment_id ?rtype ?args]
    [TestConditions ?fragment_id]
    [Visit ?fragment_id]
    [set DynamicParent = ?fragment_id]
    [BestChoices ?fragment_id ?next_best]
    [set NextBestChoices = ?next_best]
    [Member ?m ?next_best]
    [= [?frag_child ?] ?m]
    [TestConditions ?frag_child]
    [Visit ?frag_child]
    [set CurrentFragment = ?frag_child]
    [BestChoices ?frag_child ?new_best]
    [set NextBestChoices = ?new_best]
[end]
UpdateCurrentFragment ?fragment_id:
    [TestConditions ?fragment_id]
    [Visit ?fragment_id]
    [set DynamicParent = none]
    [set CurrentFragment = ?fragment_id]
    [BestChoices ?fragment_id ?next_best]
    [set NextBestChoices = ?next_best]
[end]
UpdateCurrentFragment ?fragment_id:
    [Not [TestConditions ?fragment_id]]
    [Throw updateCurrentFragment conditions not met for ?fragment_id]
[end]

[predicate]
GetFromNextBestChoices ?next_fragment ?choice_id:
    [ChoiceInList [?next_fragment ?choice_id] NextBestChoices]
[end]