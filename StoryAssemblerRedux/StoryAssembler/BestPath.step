initially: 
    [set MaxDepth = 10]
    [set CurDepth = 0]
    [set PathList = empty]
    [set ^AllPaths = empty]
[end]

predicate TopFrag ?fragments ?frag ?score. 
predicate AllSatisfiableChoices ?source ?satisfying_frags.

# Mention ?x: [Write ?x]

# There are three types of choices: 
# 1. GoTo: 
#       Go to a specific fragment based on its id
# 2. ChoiceSpec: 
#       Find a fragment that satisfies the choice spec 
#       Each choice must have a choice label
# 3. TopLevel: 
#       Find a fragment that does not have a choice label

[predicate]
AllPathsFrom ?source_frag ?paths: [FindPaths ?source_frag empty ?paths]

# Find all outgoing paths from ?frag and store them in the ^AllPaths global variable
# The wrapper for this Task is AllPathsFrom
# Example usage: [AllPathsFrom root ?paths]
# # Before running this, should reset ^AllPaths to empty
[predicate]
# TODO check additional unbound path case
FindPaths ?frag ?path ?found_paths:
    [Length ?path ^MaxDepth]
    [ScorePath ?path ?scored_path]
    [= ?found_paths [?scored_path]]
[end]
FindPaths ?frag ?path ?found_paths:
    [case ?frag] [Different root] : [Visit ?frag] [else] [end]
    [NotAny [AvailableNextFragment ?frag ?next]]
    [ScorePath ?path ?scored_path]
    [= ?found_paths [?scored_path]]
[end]
FindPaths ?frag ?path ?paths_from_children:
    [case ?frag] [Different root] : [Visit ?frag] [else]  [end]
    # All possible next fragments that can be selected are 'children' of the current fragment
    [FindUnique ?next [AvailableNextFragment ?frag ?next] ?children_frags]
    [FindAll ?paths_from_child [FindAllPathsFromAChildOf ?children_frags ?frag ?path ?paths_from_child] ?list_of_paths_from_children]
    [Flatten2D ?list_of_paths_from_children ?paths_from_children]
[end]

[predicate]
FindAllPathsFromAChildOf ?children ?current ?current_path ?paths_from_child:
    [Not [Length ?children empty]]
    [Member ?child ?children] # Select a child from ?children
    [FindPathsForChild ?child ?current ?current_path ?paths_from_child]
[end]
[predicate]
FindPathsForChild ?child ?current ?current_path ?paths_from_child:
    # Construct the path to the child (not including the child)
    [Add ?current ?current_path ?child_path]       
    # Findall the paths from the child, store the result, and undo the state changes
    # This line does not Fail unless FindPaths fails
    [Backtrack [FindPaths ?child ?child_path] ?paths_from_child]
[end]

ScorePath ?path ?scored_path: [ScoreCalculation ?path ?value] [= ?scored_path [?path ?value]]

ScoreCalculation ?path ?value: 
    [LengthValue ?path ?length_value] # [= ?length_value 0]
    
    [SatisfactionValue ?path ?satisfied_value] 
    [set ^Value = ?length_value + MaxDepth * ?satisfied_value] 
    [= ?value ^Value]
[end]

[predicate]
LengthValue ?path ?value:
    [Reverse ?path ?in_order]
    [Length ?in_order ?depth]
    [set ^Value = -?depth] [= ?value ^Value]
[end]

SatisfactionValue ?path ?value: [Length ?path 0] [= ?value 0]
SatisfactionValue ?path ?value: [WantsSatisfied ?value]

WantsSatisfied ?count:
    [FindAll ?want_id [FulfilledInScene ?want_id] ?satisfied_wants]
    [Length ?satisfied_wants ?count]
[end]

FulfilledInScene ?want_id:
    [Want ^CurrentScene ?want_id]
    [Fulfilled ?want_id]
[end]