initially: 
    [set MaxDepth = 10]
    [set CurDepth = 0]
    [set PathList = empty]
    [set ^AllPaths = empty]
[end]

predicate TopFrag ?fragments ?frag ?score. 
predicate AllSatisfiableChoices ?source ?satisfying_frags.

# Mention ?x: [Write ?x]

# There are three types of choices: 
# 1. GoTo: 
#       Go to a specific fragment based on its id
# 2. ChoiceSpec: 
#       Find a fragment that satisfies the choice spec 
#       Each choice must have a choice label
# 3. TopLevel: 
#       Find a fragment that does not have a choice label

[predicate]
AllPathsFrom ?source_frag ?paths:
    [set ^AllPaths = empty]
    [FindPaths ?source_frag empty]
    [= ?paths ^AllPaths]
[end]

# Find all outgoing paths from ?frag and store them in the ^AllPaths global variable
# The wrapper for this Task is AllPathsFrom
# Example usage: [AllPathsFrom root ?paths]
# # Before running this, should reset ^AllPaths to empty
[predicate]
# TODO check additional unbound path case
FindPaths ?frag ?path:
    [Length ?path ^MaxDepth]
    [ScorePath ?path ?scored_path]
    [add ?scored_path ^AllPaths]
[end]
FindPaths ?frag ?path:
    [case ?frag] [Different root] : [Visit ?frag] [else] [end]
    [NotAny [AvailableNextFragment ?frag ?next]]
    [ScorePath ?path ?scored_path]
    [add ?scored_path ^AllPaths]
[end]
FindPaths ?frag ?path:
    [case ?frag] [Different root] : [Visit ?frag] [else]  [end]
    [FindUnique ?next [AvailableNextFragment ?frag ?next] ?all_possible_next_frags]
    [ForEach [Member ?member ?all_possible_next_frags] 
        [Add ?member ?path ?new_path]
        [FindPaths ?member ?new_path]
    ]
[end]

ScorePath ?path ?scored_path: [ScoreCalculation ?path ?value] [= ?scored_path [?path ?value]]

ScoreCalculation ?path ?value: 
    [LengthValue ?path ?length_value] # [= ?length_value 0]
    
    [SatisfactionValue ?path ?satisfied_value] 
    [set ^Value = ?length_value + MaxDepth * ?satisfied_value] 
    [= ?value ^Value]
[end]

[predicate]
LengthValue ?path ?value:
    [Reverse ?path ?in_order]
    [Length ?in_order ?depth]
    [set ^Value = -?depth] [= ?value ^Value]
[end]

SatisfactionValue ?path ?value: [Length ?path 0] [= ?value 0]
SatisfactionValue ?path ?value: [WantsSatisfied ?value]

WantsSatisfied ?count:
    [FindAll ?want_id [FulfilledInScene ?want_id] ?satisfied_wants]
    [Length ?satisfied_wants ?count]
[end]

FulfilledInScene ?want_id:
    [Want ^CurrentScene ?want_id]
    [Fulfilled ?want_id]
[end]