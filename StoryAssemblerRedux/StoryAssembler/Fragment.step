# Original StoryAssembler example frag: https://github.com/LudoNarrative/StoryAssembler/wiki/Creating-Scene-Content

## Define the fragment attributes ##

# TODO Document: choice_ids should not overlap with goto choice ids

# Required fragment attributes
predicate Fragment ?frag ?scene. 
predicate Effects ?frag.
predicate ApplyEffects ?frag.
predicate Conditions ?frag.
predicate TestConditions ?frag.

# Optional predicates
predicate Content ?frag.
predicate Speaker ?frag ?speaker.
predicate ChoiceLabel ?frag.
predicate ChoiceCondition ?frag ?choice_id.
predicate GoToChoice ?frag ?target_frag.

# Declaring a request marks the ?fragment as a dynamic fragment
# Dynamic fragments 
# ?request_type: 'goto' or 'conditional'
# ?arguments: 
#   for a goto request, the id of the fragment that will complete this fragment
#   for a conditional request, a tuple representing the condition that will satisfy the request
# goto example:
#       example: Request dynamicgoto completion.
# conditional example:
#       example: Request dynamic_frag conditional [Dating ally protagonist].
predicate Request ?fragment ?request_type ?arguments.

# Fragment fluents set during execution

# TODO Document
fluent Expanded ?fragment ?scene.
# TODO Document & test
fluent Reusable ?fragment ?scene.

# Check if a fragment is available to be visited. 
# The conditions to be avialiable is that the fragment must be reusable or not expanded 
predicate Available ?fragment.

Available ?fragment: [Reusable ?fragment CurrentScene]
Available ?fragment: [Not [Expanded ?fragment CurrentScene]]

## End fragment attributes ##

# Additional tasks and predicates

# Check if a fragment has a choice label, but does not print the text of the choice label
predicate HasChoiceLabel ?frag.

task RenderFragment ?fragment.
predicate TopLevelFragment ?fragment.
# TODO document
predicate Request ?fragment ?request_type ?go_to_or_condition.

TopLevelFragment ?frag: [Fragment ?frag CurrentScene] [Not [HasChoiceLabel ?frag]] # If it has a choice label it is not a top level fragment

[predicate]
HasChoiceLabel ?frag: [Fragment ?frag CurrentScene] [IgnoreOutput [ChoiceLabel ?frag]]

[predicate]
SatisfiesChoiceCondition ?frag ?choice_id:
    [ChoiceCondition ?frag ?choice_id]
    [Fragment ?frag CurrentScene]
[end]


[predicate]
ApplyEffects ?frag:
    [Fragment ?frag CurrentScene]
    [Effects ?frag]
[end]

[predicate]
TestConditions ?frag:
    [Fragment ?frag CurrentScene]
    [Conditions ?frag]
[end]

# TODO unused 
[predicate]
EffectMakesWantTrue ?fragment ?want_id: 
    [Want ?scene ?want_id]
    [Not [Fulfilled ?want_id]]
    [ApplyEffects ?fragment]
    [Fulfilled ?want_id]
[end]

Visit ?frag:
    [Fragment ?frag CurrentScene]      # without this line, ?frag may not be ground...
    [now [Expanded ?frag CurrentScene]] # TODO: this is a side effect, but it is necessary for the planner to work
    [ApplyEffects ?frag]
[end]

# There are three types of choices: 
# 1. GoTo: 
#       Go to a specific fragment based on its id
# 2. ChoiceCondition: 
#       Find a fragment that satisfies the choice spec 
#       Each choice must have a choice label
# 3. TopLevel: 
#       Find a fragment that does not have a choice label

# Returns a posible next fragment from the current fragment ?source_frag
# Side Effect: AvailableConditionalChoice will apply the effects of the new fragment
# choice_id: will be false unless there is an associated choice_id, ie the choice type is a ConditionalChoice
predicate AvailableNextFragment ?source_frag ?choice. # a choice is a [?target_frag ?choice_id] tuple
# TODO if source_frag is not ground yet, ?args, rtype will not be either
# TODOO if we apply the effects here, it will be slow since it will grab all possible effects
[predicate]
AvailableNextFragment ?source_frag [?target_frag ?choice_id]:
    # Get a direct go to choice or a conditional choice
    [AvailableNextHelper ?source_frag [?target_frag ?choice_id]]
[end]
AvailableNextFragment ?source_frag [?target_frag false]:
    # Get a top level fragment (a fragment with no choice label)
    # DODO do we need the notany checks?
    [AvailableTopLevelFragment ?target_frag]
[end]

[predicate]
AvailableNextHelper ?source_frag [?target ?choice_id]:
    # If the source fragment is a dynamic node, then we need to make a request for a satisfying fragment 
    # and begin the search from the fragment that completes the request. 
    # AssembleRequest will also apply the effects of the new fragment
    # If the source fragment is not a dynamic node, then we can begin the search from the source fragment 
    [AssembleRequest ?source_frag ?search_origin] 
    [AvailableChoice ?search_origin [?target ?choice_id]]
[end]

# All goto and conditional choices
[predicate]
AvailableChoice ?origin [?target_frag false]:
    [AvailableGoToFrag ?origin ?target_frag]
[end]
[predicate]
AvailableChoice ?origin [?target_frag ?choice_id]:
    [AvailableConditionalChoice ?origin ?choice_id ?target_frag]
[end]

# Check that the ?source frag is a dynamic node
# If so, execute a request for a satisfying fragment
# and apply its effects
# Otherwise, return the source fragment
predicate AssembleRequest ?source_frag ?response.
AssembleRequest ?source_frag ?response:
    [Request ?source_frag ?request_type ?args]
    # Make the request for a completion node and apply its effects
    [MakeRequest ?source_frag ?request_type ?args ?response]
[end]
AssembleRequest ?source_frag ?source_frag: [Fragment ?source_frag CurrentScene] [NotAny [Request ?source_frag ? ?]]

# SIDE EFFECT: potentially applies the Effects of ?response
[predicate]
MakeRequest ?source goto ?go_to_frag ?go_to_frag:
    # If we've reached here we know we have a dynamic fragment with a goto request
    [AvailableForRequest ?source ?go_to_frag]
[end]
MakeRequest ?source condition ?search_condition ?response:
    [AvailableForRequest ?source ?response]
    [ApplyEffects ?response]
    [Call ?search_condition] # Check the necessary condition # TODO make sure this is checking using the CheckCondition rather than Condition
[end]

[predicate]
AvailableForRequest ?requesting ?response:
    [NotAny [Request ?response ? ?]] # TODO I don't think we want to chain responses? If not, we can get rid of the difference check
    [TestConditions ?response]
    [Available ?response]
    # [Different ?requesting ?response]
[end]

[predicate]
AvailableGoToFrag ?source_frag ?target_frag:
    [GoToChoice ?source_frag ?target_frag]
    [Available ?target_frag]
    [TestConditions ?target_frag]
[end]

[predicate]
AvailableGoToChoice ?source_frag [?target_frag false]:
    [AvailableGoToFrag ?source_frag ?target_frag]
[end]

[predicate]
AllGoToChoices root empty.  # there is no source frag
AllGoToChoices ?source_frag ?choices:
    [Different ?source_frag root]
    [FindUnique ?choice [AvailableGoToChoice ?source_frag ?choice] ?choices]
[end]

# Returns true if ?satisfying_frag satisfies ?source_frag's choice ?choice_id
[predicate]
AvailableConditionalChoice ?source_frag ?choice_id ?satisfying_frag: 
    [HasChoiceLabel ?satisfying_frag]        # the new fragment must have a choice label
    [TestConditions ?satisfying_frag]
    [ApplyEffects ?satisfying_frag]            # apply the effects of the new frag
    [SatisfiesChoiceCondition ?source_frag ?choice_id]  # see if they satisfy the choice spec of the source frag
    [Available ?satisfying_frag]          # TODO I can't put this at the top even though it would speedup
[end]

[predicate]
AvailableTopLevelFragment ?frag:
    [TopLevelFragment ?frag]    # must not have a choice label
    [Available ?frag]
    [TestConditions ?frag]
[end]

[predicate]
AvailableTopLevelChoice [?frag false]:
    [AvailableTopLevelFragment ?frag]
[end]

[predicate]
AllAvailableTopLevelChoices ?choices:
    [FindUnique ?choice [AvailableTopLevelChoice ?choice] ?choices]
[end]

