#### Author-facing fragment predicates ####

# Required fragment attributes
predicate Fragment ?frag ?scene. 
predicate Effects ?frag.
predicate Conditions ?frag.

# Optional predicates
predicate Content ?frag.
predicate Speaker ?frag ?speaker.
predicate ChoiceLabel ?frag.
predicate ChoiceCondition ?frag ?choice_id.
predicate GoToChoice ?frag ?target_frag.
fluent    Reusable ?fragment ?scene.

# Optional predicate that allows you to tag certain fragments with properties
[function]
predicate Tag ?frag ?key ?value.

predicate Request ?fragment ?request_type ?arguments.

#### End author-facing fragment predicates ####

#### Fragment fluents set during execution ####

# Expanded is a fluent that is set when a fragment is visited
# For fragments that are not marked Reusable, Expanded will disallow the fragment from being visited again
fluent Expanded ?fragment ?scene.

#### End fragment fluents set during execution ####

#### Predicates used during execution ####
# Check if a fragment is available to be visited. 
# The conditions to be avialiable is that the fragment must be reusable or not expanded 
predicate Available ?fragment.
predicate ApplyEffects ?frag.
predicate TestConditions ?frag.
#### End predicates used during execution ####

Available ?fragment: [Reusable ?fragment CurrentScene]
Available ?fragment: [Not [Expanded ?fragment CurrentScene]]

## End fragment attributes ##

# Additional tasks and predicates

# Check if a fragment has a choice label, but does not print the text of the choice label
predicate HasChoiceLabel ?frag.

# A top level fragment is a fragment that does not have a choice label
# These fragments are the only fragments that can be reached from the 'root' fragment
# and are also the only fragments that will be looked at when there is no outgoing choice from the
# current fragment.
predicate TopLevelFragment ?fragment.


# Marking a fragment with the request predicate makes it a dynamic fragment
# Dynamic fragments will assemble the properties of the fragment with the properties of the
# fragment that satisfies the request. 
# 1.) Both sets of conditions will be checked
# 2.) The effects of both fragments will be applied
# 3.) The choices of each fragment will be combined
# ?request_type: 'goto' or 'condition' which operate like GoToChoice and ChoiceCondition respectively
# 
# ?go_to_or_condition: 
#   for a goto request, the id of the fragment that will complete this fragment
#   for a conditional request, a tuple representing the condition that will satisfy the request
# goto example:
#       example: Request dynamicgoto completion.
# conditional example:
#       example: Request dynamic_frag condition [Dating ally protagonist].
predicate Request ?fragment ?request_type ?go_to_or_condition.

TopLevelFragment ?frag: [Fragment ?frag CurrentScene] [Not [HasChoiceLabel ?frag]] # If it has a choice label it is not a top level fragment

[predicate]
HasChoiceLabel ?frag: [Fragment ?frag CurrentScene] [IgnoreOutput [ChoiceLabel ?frag]]

[predicate]
SatisfiesChoiceCondition ?frag ?choice_id:
    [ChoiceCondition ?frag ?choice_id]
    [Fragment ?frag CurrentScene]
[end]

[predicate]
ApplyEffects ?frag:
    [Fragment ?frag CurrentScene]
    [Effects ?frag]
[end]

[predicate]
TestConditions ?frag:
    [Fragment ?frag CurrentScene]
    [Conditions ?frag]
[end]

# TODO unused 
[predicate]
EffectMakesWantTrue ?fragment ?want_id: 
    [Want ?scene ?want_id]
    [Not [Fulfilled ?want_id]]
    [ApplyEffects ?fragment]
    [Fulfilled ?want_id]
[end]

Visit ?frag:
    [Fragment ?frag CurrentScene]      # without this line, ?frag may not be ground...
    [now [Expanded ?frag CurrentScene]] # TODO: this is a side effect, but it is necessary for the planner to work
    [ApplyEffects ?frag]
[end]

# Used for reseting a scene to its initial conditions
Unvisit ?frag ?scene: [now [Not [Expanded ?frag ?scene]]]

# There are three types of choices: 
# 1. GoTo:
#       Go to a specific fragment based on its id
# 2. ChoiceCondition: 
#       Find a fragment that satisfies the choice spec 
#       Each choice must have a choice label
# 3. TopLevel: 
#       Find a fragment that does not have a choice label
# 
# ... 4.) There are also dynamic fragments, which may be of each type. 
#         See the 'Request' predicate above

# Binds with fragment that can be reached (?target_frag) from the current fragment (?source_frag)
# SIDE EFFECT: AvailableConditionalChoice will apply the effects of the new fragment, so this needs to be backtracked when used
# choice_id: will be 'direct' unless there is an associated choice_id, ie the choice type is a ConditionalChoice
predicate AvailableNextFragment ?source_frag ?choice. # a choice is a [?target_frag ?choice_id] tuple
# TODO if we apply the effects here, it will be slow since it will grab all possible effects
[predicate]
AvailableNextFragment ?source_frag [?target_frag ?choice_id]:
    # Get a direct go to choice or a conditional choice
    # Also tries to assemble dynamic fragments
    [AvailableNextFragmentHelper ?source_frag [?target_frag ?choice_id]]
[end]
AvailableNextFragment ?source_frag [?target_frag direct]:
    # Get a top level fragment (a fragment with no choice label)
    # DODO do we need the notany checks?
    [AvailableTopLevelFragment ?target_frag]
[end]

[predicate]
AvailableNextFragmentHelper ?source_frag [?target dynamic]:
    [Request ?source_frag ?request_type ?args]
    [MakeRequest ?source_frag ?request_type ?args ?target]
[end]
AvailableNextFragmentHelper ?source_frag [?target ?choice_id]:
    [Fragment ?source_frag CurrentScene] 
    [NotAny [Request ?source_frag ? ?]]
    [AvailableChoice ?source_frag [?target ?choice_id]]
[end]

# All goto and conditional choices
[predicate]
AvailableChoice ?origin [?target_frag direct]:
    [AvailableGoToFrag ?origin ?target_frag]
[end]
AvailableChoice ?origin [?target_frag ?choice_id]:
    [AvailableConditionalChoice ?origin ?choice_id ?target_frag]
[end]

# Check that the ?source frag is a dynamic node
# If so, execute a request for a satisfying fragment
# and apply its effects
# # Otherwise, return the source fragment
# predicate AssembleAndMakeRequest ?source_frag ?response.
# AssembleAndMakeRequest ?source_frag ?response:
#     # TODO Assemble request does not add the ?response to the path in the case that we have a dynamic fragment
#     [Request ?source_frag ?request_type ?args]
#     # Make the request for a completion node and apply its effects
#     [MakeRequest ?source_frag ?request_type ?args ?response]
# [end]
# AssembleAndMakeRequest ?source_frag ?source_frag: [Fragment ?source_frag CurrentScene] [NotAny [Request ?source_frag ? ?]]

# Make a request from the dynamic ?source node
# SIDE EFFECT: applies the Effects of ?response
# Before calling this task, ?source must be verified as a [Request]
[predicate]
MakeRequest ?source goto ?go_to_frag ?go_to_frag:
    # If we've reached here we know we have a dynamic fragment with a goto request
    [AvailableForRequest ?source ?go_to_frag]
    [ApplyEffects ?go_to_frag]
[end]
MakeRequest ?source condition ?search_condition ?response:
    [AvailableForRequest ?source ?response]
    [ApplyEffects ?response]
    [Call ?search_condition] # Check that the response satisfies the condition
[end]

[predicate]
AvailableForRequest ?requesting ?response:
    [Fragment ?response CurrentScene]
    [TestConditions ?response]
    [FailIfRequest ?response] # [Different ?requesting ?response] # Currently don't allow chaining dynamic nodes...
    [Available ?response]
[end]

[fallible]
FailIfRequest ?fragment: [NotAny [Request ?fragment ? ?]]

[predicate]
IsRequest ?fragment: [Request ?fragment ? ?]

[predicate]
AvailableGoToFrag ?source_frag ?target_frag:
    [GoToChoice ?source_frag ?target_frag]
    [Available ?target_frag]
    [TestConditions ?target_frag]
[end]

[predicate]
AvailableGoToChoice ?source_frag [?target_frag direct]:
    [AvailableGoToFrag ?source_frag ?target_frag]
[end]

[predicate]
AllGoToChoices root empty.  # there is no source frag
AllGoToChoices ?source_frag ?choices:
    [Different ?source_frag root]
    [FindUnique ?choice [AvailableGoToChoice ?source_frag ?choice] ?choices]
[end]

# Returns true if ?satisfying_frag satisfies ?source_frag's choice ?choice_id
[predicate]
AvailableConditionalChoice ?source_frag ?choice_id ?satisfying_frag: 
    [HasChoiceLabel ?satisfying_frag]        # the new fragment must have a choice label
    [TestConditions ?satisfying_frag]
    [ApplyEffects ?satisfying_frag]            # apply the effects of the new frag
    [SatisfiesChoiceCondition ?source_frag ?choice_id]  # see if they satisfy the choice spec of the source frag
    [Available ?satisfying_frag]          # TODO I can't put this at the top even though it would speedup
[end]

[predicate]
AvailableTopLevelFragment ?frag:
    [TopLevelFragment ?frag]    # must not have a choice label
    [Available ?frag]
    [TestConditions ?frag]
[end]

[predicate]
AvailableTopLevelChoice [?frag direct]:
    [AvailableTopLevelFragment ?frag]
[end]

[predicate]
AllAvailableTopLevelChoices ?choices:
    [FindUnique ?choice [AvailableTopLevelChoice ?choice] ?choices]
[end]

# Notes

# Original StoryAssembler example frag: https://github.com/LudoNarrative/StoryAssembler/wiki/Creating-Scene-Content
# TODO Document: choice_ids should not overlap with goto choice ids