# Must declare the scene for various checks to succeed
Scene test.

# Declare all storylets (fragments)
[randomly]
Fragment disastrous_date test.
Fragment necessary test.
Fragment on_the_path test.
Fragment not_on_the_path test.
Fragment hard test.
Fragment bad test.
Fragment pause test.
Fragment unapologetic test.
Fragment apology test.
Fragment respite test.
Fragment overthinking test. 
Fragment dynamic test.

# Scene specific predicates
fluent Dating ?person1 ?person2.
fluent Dislikes ?person1 ?person2.
fluent Married ? ?.
fluent Respite.
fluent ExtraPoints.

InitialSceneState test:
    [set ^Initialized = true]
    [now [Not [Dating ally protagonist]]]
    [now [Not [Respite]]]
    [now [Not [ExtraPoints]]]
[end]

Content necessary: You must get here
Effects necessary.
Conditions necessary.
GoToChoice necessary disastrous_date.
GoToChoice necessary dynamic.

Content disastrous_date: Ally and protagonist go to a high end restaurant. Ally orders a $100 bottle of wine. Protagonist is offended. 
Conditions disastrous_date:
    [Not [Dating ally protagonist]]
[end]
Effects disastrous_date. # no effects
Speaker disastrous_date ?speaker: [= ?speaker "ally"]
[randomly]
ConditionalChoice disastrous_date ends_badly: 
    [Dislikes ally protagonist]
[end]
ConditionalChoice disastrous_date tentative_recovery: 
    [Dating ally protagonist]
[end]
ConditionalChoice disastrous_date pause: 
    [Respite]
[end]
GoToChoice disastrous_date overthinking.

Content unapologetic: You won't even spend $100 on me?.
[randomly] ChoiceLabel unapologetic: Be unapologetic.
Effects unapologetic:
    [now [Dislikes ally protagonist]]
[end]
Conditions unapologetic.

Content apology: I'm sorry I ordered the wine, give me another chance?.
[randomly] ChoiceLabel apology: Apologize...
Effects apology:
    [now [Dating ally protagonist]]
[end]
Conditions apology.

Content respite: Can we step outside for some fresh air? I think we need to step back.
[randomly] ChoiceLabel respite: Take a break.
Effects respite:
    [now [Respite]]
[end]
Conditions respite.

Request dynamic goto not_on_the_path.
Conditions dynamic.
Effects dynamic: [now [ExtraPoints]]
[randomly] ChoiceLabel dynamic: Look outward.

Content not_on_the_path: "In another town, someone else is dating"
Effects not_on_the_path:
    [now [Dating someone_else another_person]]
[end]
Conditions not_on_the_path.

Content hard: "I do"
Effects hard:
    [now [Married ally protagonist]]
[end]
Conditions hard:
    [Dating ally protagonist]
[end]


# [randomly] ChoiceLabel dynamic2: Look outward.
# Request dynamic condition [request condition].
# Conditions dynamic.
# Effects dynamic.

Content bad: "should not be able to get here"
Effects bad.

Content overthinking: What is happening?? I'm overthinking this. I need to take a break.
[randomly] ChoiceLabel overthinking: Take a break. # TODO check that there are choicelabels for goto recipients
Effects overthinking.
Conditions overthinking.

[randomly]
Want test initialized.
Want test characters_dating.
Want test some_respite.
Want test extra_points.
Want test married.
# # [ [Want Test initialized] [Want test characters_dating] ]. # aspirational syntax

[randomly]
Fulfilled initialized: [= ^Initialized true]
Fulfilled characters_dating: [Dating ally protagonist]
Fulfilled some_respite: [Respite]
Fulfilled married: [Married ally protagonist]
Fulfilled extra_points: [ExtraPoints]

# Another scene
# ... with an incomplete storyspec
# Scene incomplete_scene.
# InitialSceneState incomplete_scene:
#     [set Initialized = false]
# [end]

# [randomly]
# Want incomplete_scene initialized.
# Fulfilled initialized:
#     [= ^Initialized true]
# [end]